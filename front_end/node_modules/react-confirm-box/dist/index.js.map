{"version":3,"file":"index.js","sources":["../src/helpers/unique-name.ts","../src/config.ts","../src/portal/index.tsx","../src/confirm/index.tsx","../src/index.ts"],"sourcesContent":["export const nameGenerator = (): string => {\n  return '_' + Math.random().toString(36).substr(2, 9);\n};\n","import { nameGenerator } from './helpers/unique-name';\n\nexport const mountRootId = `confirm-box-root${nameGenerator()}`;\n","import React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { mountRootId } from '../config';\n\ntype Props = {\n  children: Element;\n};\n\nexport const Portal: React.FC<Props> = ({ children }: Props) => {\n  const mount = document.getElementById(mountRootId) as HTMLElement;\n  const el = document.createElement('div');\n\n  useEffect((): any => {\n    mount.appendChild(el);\n    return () => mount.removeChild(el);\n  }, [el, mount]);\n\n  return createPortal(children, el);\n};\n","import React, { useState } from 'react';\nimport './styles.scss';\nimport { Options } from '../types';\n\ntype Props = {\n  message: string;\n  resolver: (decision: boolean) => void;\n  options?: Options;\n};\n\nconst ConfirmBox: React.FC<Props> = ({ resolver, message, options }: Props) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const onConfirmPopup = () => {\n    setIsOpen(false);\n    resolver(true);\n  };\n\n  const onCancelPopup = () => {\n    setIsOpen(false);\n    resolver(false);\n  };\n\n  const onOverlay = () => {\n    if (!options?.closeOnOverlayClick) return;\n    setIsOpen(false);\n    resolver(false);\n  };\n\n  const render = () => {\n    const { classNames } = options || {};\n\n    const containerClassNames = `confirm-box__content ${classNames?.container || ''}\n    `;\n    const confirmButtonClassNames = `${classNames?.buttons || ''} ${\n      classNames?.confirmButton || ''\n    }\n    `;\n    const cancelButtonClassNames = `${classNames?.buttons || ''} ${\n      classNames?.cancelButton || ''\n    }`;\n\n    if (!options?.render) {\n      return (\n        <div className={containerClassNames}>\n          <span>{message}</span>\n          <div className=\"confirm-box__actions\">\n            <button\n              onClick={onConfirmPopup}\n              role=\"confirmable-button\"\n              className={confirmButtonClassNames}\n            >\n              {options?.labels?.confirmable ? options?.labels?.confirmable : 'Yes'}\n            </button>\n\n            <button\n              onClick={onCancelPopup}\n              role=\"cancellable-button\"\n              className={cancelButtonClassNames}\n            >\n              {options?.labels?.cancellable ? options?.labels?.cancellable : 'No'}\n            </button>\n          </div>\n        </div>\n      );\n    }\n\n    return options.render(message, onConfirmPopup, onCancelPopup);\n  };\n\n  return isOpen ? (\n    <div className=\"confirm-box\">\n      {render()}\n      <div className=\"confirm-box__overlay\" onClick={onOverlay} />\n    </div>\n  ) : null;\n};\n\nexport default ConfirmBox;\n","import ReactDOM from 'react-dom';\n\nimport { Portal } from './portal';\nimport ConfirmBox from './confirm';\nimport React from 'react';\nimport { mountRootId } from './config';\nimport { Options } from './types';\n\nexport const confirm = async (message: string, options?: Options): Promise<any> => {\n  const mount = await document.getElementById(mountRootId);\n  if (!mount) {\n    const rootMount = await document.createElement('div');\n    await rootMount.setAttribute('id', mountRootId);\n    document.body.appendChild(rootMount);\n  }\n\n  return new Promise((resolve) => {\n    const ConfirmBoxEl = React.createElement(ConfirmBox, {\n      resolver: resolve,\n      message,\n      options,\n    });\n    const PortalEl = React.createElement(Portal, null, ConfirmBoxEl);\n    ReactDOM.render(PortalEl, document.getElementById(mountRootId));\n  });\n};\n"],"names":["nameGenerator","Math","random","toString","substr","mountRootId","Portal","_a","children","mount","document","getElementById","el","createElement","useEffect","appendChild","removeChild","createPortal","ConfirmBox","onConfirmPopup","setIsOpen","resolver","onCancelPopup","classNames","containerClassNames","confirmButtonClassNames","message","options","_b","useState","isOpen","React","className","container","buttons","confirmButton","cancelButtonClassNames","cancelButton","render","onClick","role","labels","confirmable","cancellable","closeOnOverlayClick","confirm","rootMount","setAttribute","body","Promise","resolve","ConfirmBoxEl","PortalEl","ReactDOM"],"mappings":"qvDAAO,IAAMA,cAAgB,WAC3B,MAAO,IAAMC,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,ICCvCC,YAAc,mBAAmBL,gBCMjCM,OAA0B,SAACC,OAAEC,aAClCC,EAAQC,SAASC,eAAeN,aAChCO,EAAKF,SAASG,cAAc,OAOlC,OALAC,gBAAU,WAER,OADAL,EAAMM,YAAYH,GACX,WAAM,OAAAH,EAAMO,YAAYJ,KAC9B,CAACA,EAAIH,IAEDQ,sBAAaT,EAAUI,4nBCPhC,IAAMM,WAA8B,SAACX,GAGZ,SAAjBY,IACJC,GAAU,GACVC,GAAS,GAGW,SAAhBC,IACJF,GAAU,GACVC,GAAS,OAUDE,EAEFC,EAEAC,EAxB6BJ,aAAUK,YAASC,YAClDC,EAAsBC,gBAAS,GAA9BC,OAAQV,OA2Df,OAAOU,EACLC,oCAAKC,UAAU,gBAzCPT,GAAeI,GAAW,eAE5BH,EAAsB,0BAAwBD,MAAAA,SAAAA,EAAYU,YAAa,aAEvER,IAA6BF,MAAAA,SAAAA,EAAYW,UAAW,UACxDX,MAAAA,SAAAA,EAAYY,gBAAiB,aAGzBC,IAA4Bb,MAAAA,SAAAA,EAAYW,UAAW,UACvDX,MAAAA,SAAAA,EAAYc,eAAgB,IAGzBV,MAAAA,GAAAA,EAASW,OAyBPX,EAAQW,OAAOZ,EAASP,EAAgBG,GAvB3CS,oCAAKC,UAAWR,GACdO,yCAAOL,GACPK,oCAAKC,UAAU,wBACbD,uCACEQ,QAASpB,EACTqB,KAAK,qBACLR,UAAWP,aAEVE,MAAAA,SAAAA,EAASc,uBAAQC,sBAAcf,MAAAA,SAAAA,EAASc,6BAAQC,YAAc,OAGjEX,uCACEQ,QAASjB,EACTkB,KAAK,qBACLR,UAAWI,aAEVT,MAAAA,SAAAA,EAASc,uBAAQE,sBAAchB,MAAAA,SAAAA,EAASc,6BAAQE,YAAc,SAavEZ,oCAAKC,UAAU,uBAAuBO,QAlDxB,WACXZ,MAAAA,GAAAA,EAASiB,sBACdxB,GAAU,GACVC,GAAS,QAiDP,MCnEOwB,QAAU,SAAOnB,EAAiBC,qHAC/B,SAAMjB,SAASC,eAAeN,4BAA9BE,kBAEYG,SAASG,cAAc,eAC/C,UADMiC,EAAYvC,UACFwC,aAAa,KAAM1C,qBAAnCE,SACAG,SAASsC,KAAKjC,YAAY+B,oBAG5B,SAAO,IAAIG,QAAQ,SAACC,GACZC,EAAepB,eAAMlB,cAAcK,WAAY,CACnDG,SAAU6B,EACVxB,UACAC,YAEIyB,EAAWrB,eAAMlB,cAAcP,OAAQ,KAAM6C,GACnDE,kBAASf,OAAOc,EAAU1C,SAASC,eAAeN"}