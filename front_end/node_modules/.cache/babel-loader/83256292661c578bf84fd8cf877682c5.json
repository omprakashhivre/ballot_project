{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omG\\\\OneDrive\\\\Documents\\\\GitHub\\\\ballot_project\\\\front_end\\\\src\\\\Components\\\\Vote.js\",\n    _s = $RefreshSig$();\n\nimport Nav from \"./nav\";\nimport React from 'react';\nimport { Frame } from './Frame';\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from 'react';\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Vote = () => {\n  _s();\n\n  let navigate = useNavigate();\n  useEffect(() => {\n    if (localStorage.getItem(\"userID\")) {\n      if (localStorage.getItem(\"userID\") == 1) {\n        console.log(\"admin logged\");\n        navigate(\"/homepage\");\n      } else if (localStorage.getItem(\"userID\") > 1) console.log(\"user logged\");\n\n      getallQuery();\n    } else navigate(\"/\");\n  }, []);\n  const local_userId = localStorage.getItem(\"userID\");\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getallQuery = async () => {\n    setIsLoading(true);\n    var array = [];\n    const idlist = await fetch(\"http://localhost:5000/vote/getidlist\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId: local_userId\n      })\n    }).then(resp1 => resp1.json()).then(idlist1 => idlist1); // console.log(idlist.data);\n\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:5000/query/getfilteredquery\").then(resp => resp.json()).then(actualData => {\n      return actualData;\n    });\n    const respQueries = allQuery.data;\n    await respQueries.map(async singleQuery => {\n      var q;\n      const query = singleQuery.queryName;\n      const id = singleQuery.queryId;\n      q = {\n        \"id\": id,\n        \"query\": query,\n        \"startDate\": singleQuery.querystartdate,\n        \"endDate\": singleQuery.queryenddate\n      };\n      const singlequeryoptions = await fetch(\"http://localhost:5000/options/getalloptions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          queryId: id\n        })\n      }).then(resp => resp.json()).then(async actualData => {\n        let alloptions = [];\n        const opt = await actualData.data.map(async singleoption => {\n          let firstOption = {\n            \"optionId\": singleoption.optionId,\n            \"optionName\": singleoption.options,\n            \"querystartdate\": singleoption.querystartdate,\n            \"queryenddate\": singleoption.queryenddate\n          };\n          const voteaddedoption = await fetch(\"http://localhost:5000/users/voteforsingleoption\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              optionId: singleoption.optionId\n            })\n          }).then(resp1 => resp1.json()).then(optiondata => {\n            firstOption = { ...firstOption,\n              \"totalvote\": optiondata.data[0].voteforsingleoption\n            };\n          });\n          alloptions.push(firstOption);\n          return firstOption;\n        });\n        let isvoted = false;\n        idlist.data.map(id => id.queryId == q.id ? isvoted = true : {});\n        q = { ...q,\n          \"options\": alloptions,\n          \"isUserVoted\": isvoted\n        };\n        array.push(q);\n        return actualData;\n      });\n      array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1);\n      return 1;\n    });\n    setTimeout(() => {\n      setIsLoading(false);\n      setData(array);\n    }, 1500);\n    console.log(array);\n  };\n\n  const setVote = (qid, optionId) => {\n    const itm = localStorage.getItem(\"user\"); // console.log(itm);\n\n    alert(\"query id \" + qid + \" optionId \" + optionId);\n    setData(data.map(vote => vote.id === qid ? { ...vote,\n      options: vote.options.map(opt => opt.optionId == optionId ? { ...opt,\n        totalvote: opt.totalvote + 1\n      } : opt),\n      isUserVoted: true\n    } : vote)); // console.log(data);\n\n    fetch(\"http://localhost:5000/vote/castvote\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        queryId: qid,\n        optionId: optionId,\n        userId: local_userId\n      })\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      logedin: \"\",\n      firstName: localStorage.getItem(\"firstname\") || \"xx\",\n      lastName: localStorage.getItem(\"lastname\") || \"xx\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: data.length > 0 ? data.map((vote, index) => {\n        if (new Date(vote.endDate) > new Date()) return /*#__PURE__*/_jsxDEV(Frame, {\n          index: index,\n          vote: vote,\n          setVote: setVote\n        }, vote.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 28\n        }, this);\n      }) : /*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          color: \"red\",\n          textAlign: \"center\",\n          marginTop: \"5rem\"\n        },\n        children: \"currently no active ballots for vote...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)\n    }, void 0, false)]\n  }, void 0, true);\n};\n\n_s(Vote, \"lmBAQlepRIu+baXcuc8829kqbwk=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Vote;\nexport default Vote;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vote\");","map":{"version":3,"sources":["C:/Users/omG/OneDrive/Documents/GitHub/ballot_project/front_end/src/Components/Vote.js"],"names":["Nav","React","Frame","useEffect","useNavigate","useState","LoadingSpinner","Vote","navigate","localStorage","getItem","console","log","getallQuery","local_userId","data","setData","isLoading","setIsLoading","array","idlist","fetch","method","headers","body","JSON","stringify","userId","then","resp1","json","idlist1","allQuery","resp","actualData","respQueries","map","singleQuery","q","query","queryName","id","queryId","querystartdate","queryenddate","singlequeryoptions","alloptions","opt","singleoption","firstOption","optionId","options","voteaddedoption","optiondata","voteforsingleoption","push","isvoted","sort","a","b","Date","startDate","setTimeout","setVote","qid","itm","alert","vote","totalvote","isUserVoted","length","index","endDate","color","textAlign","marginTop"],"mappings":"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","sourcesContent":["import Nav from \"./nav\";\nimport React from 'react'\nimport { Frame } from './Frame'\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from 'react'\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst Vote = () => {\n  let navigate = useNavigate();\n  useEffect(() => {\n    if (localStorage.getItem(\"userID\")) {\n      if (localStorage.getItem(\"userID\") == 1) {\n        console.log(\"admin logged\");\n        navigate(\"/homepage\")\n      }\n      else if (localStorage.getItem(\"userID\") > 1)\n        console.log(\"user logged\");\n      getallQuery()\n    }\n    else\n      navigate(\"/\")\n\n\n\n\n  }, [])\n\n  const local_userId = localStorage.getItem(\"userID\")\n  const [data, setData] = useState([])\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getallQuery = async () => {\n    setIsLoading(true)\n\n    var array = [];\n\n    const idlist = await fetch(\"http://localhost:5000/vote/getidlist\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId: local_userId })\n    }).then((resp1) => resp1.json())\n      .then((idlist1) => idlist1)\n\n    // console.log(idlist.data);\n\n\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:5000/query/getfilteredquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n\n    const respQueries = allQuery.data;\n\n\n    await respQueries.map(async (singleQuery) => {\n      var q;\n\n      const query = singleQuery.queryName\n      const id = singleQuery.queryId\n      q = { \"id\": id, \"query\": query, \"startDate\": singleQuery.querystartdate, \"endDate\": singleQuery.queryenddate }\n\n\n      const singlequeryoptions = await fetch(\"http://localhost:5000/options/getalloptions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ queryId: id })\n\n      })\n        .then((resp) => resp.json())\n        .then(async (actualData) => {\n          let alloptions = []\n          const opt = await actualData.data.map(async (singleoption) => {\n            let firstOption = { \"optionId\": singleoption.optionId, \"optionName\": singleoption.options, \"querystartdate\": singleoption.querystartdate, \"queryenddate\": singleoption.queryenddate }\n\n            const voteaddedoption = await fetch(\"http://localhost:5000/users/voteforsingleoption\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ optionId: singleoption.optionId })\n            }).then((resp1) => resp1.json())\n              .then((optiondata) => {\n                firstOption = { ...firstOption, \"totalvote\": optiondata.data[0].voteforsingleoption }\n              })\n            alloptions.push(firstOption)\n            return firstOption\n          })\n\n          let isvoted = false;\n          idlist.data.map((id) => id.queryId == q.id ? isvoted = true : {})\n          q = { ...q, \"options\": alloptions, \"isUserVoted\": isvoted }\n          array.push(q)\n\n          return actualData\n        })\n      array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1)\n      return 1;\n    })\n    setTimeout(() => {\n      setIsLoading(false)\n      setData(array)\n\n\n    }, 1500)\n    console.log(array)\n\n\n  }\n\n\n  const setVote = (qid, optionId) => {\n    const itm = localStorage.getItem(\"user\")\n    // console.log(itm);\n    alert(\"query id \" + qid + \" optionId \" + optionId);\n    setData(data.map((vote) => (vote.id === qid ? { ...vote, options: vote.options.map((opt) => opt.optionId == optionId ? { ...opt, totalvote: opt.totalvote + 1 } : opt), isUserVoted: true } : vote)));\n    // console.log(data);\n    fetch(\"http://localhost:5000/vote/castvote\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ queryId: qid, optionId: optionId, userId: local_userId })\n    })\n  }\n\n  return (\n    <>\n      <Nav logedin=\"\" firstName={localStorage.getItem(\"firstname\") || \"xx\"} lastName={localStorage.getItem(\"lastname\") || \"xx\"} />\n\n\n      {\n        isLoading ? <LoadingSpinner /> :\n          <>\n            {\n              data.length > 0 ?\n                data.map((vote, index) => {\n                  if (new Date(vote.endDate) > new Date())\n                    return <Frame key={vote.id} index={index} vote={vote} setVote={setVote} />\n\n                }\n                ) : <h2 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\" }}>currently no active ballots for vote...</h2>\n            }\n          </>\n\n      }\n\n\n    </>\n  )\n}\n\nexport default Vote\n"]},"metadata":{},"sourceType":"module"}