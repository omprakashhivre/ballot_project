{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omG\\\\OneDrive\\\\Documents\\\\GitHub\\\\ballot_project\\\\front_end\\\\src\\\\Components\\\\ResetPass.js\",\n    _s = $RefreshSig$();\n\nimport { red } from \"@mui/material/colors\";\nimport { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport '../Pages/reg.css';\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ResetPass = _ref => {\n  _s();\n\n  let {\n    emailId\n  } = _ref;\n  let navigate = useNavigate();\n  console.log(emailId);\n  const [invalid, setInvalid] = useState();\n\n  const onSubmit = async e => {\n    e.preventDefault();\n    const pass = e.target.password.value;\n    const cpass = e.target.cpassword.value;\n\n    if (pass == cpass) {\n      const requestOptions = {\n        method: \"put\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          emailId: emailId,\n          password: e.target.password.value\n        })\n      };\n      const response = await fetch('http://localhost:5000/users/updatepassword', requestOptions).then(resp => resp.json()).then(actualData => {\n        return actualData;\n      });\n      const respdata = response;\n      console.log(respdata);\n\n      if (respdata.success === 1) {\n        alert(emailId + \" password updated succesfully\");\n        setTimeout(function () {\n          navigate(\"/\");\n        }, 500);\n      } else {\n        alert(\"email not updated\");\n        setInvalid('invalid');\n      }\n    } else setInvalid('invalid');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"#\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Password\",\n        required: true,\n        autoComplete: \"off\",\n        name: \"password\",\n        className: invalid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Confirm Password\",\n        required: true,\n        autoComplete: \"off\",\n        name: \"cpassword\",\n        className: invalid\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\",\n          fontSize: \"20px\",\n          display: `${invalid ? \"block\" : \"none\"}`\n        },\n        children: \"something goes wrong\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        text: \"Update Password\",\n        children: \"Update Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPass, \"triCXcVJDkSXUui9cB0+gqTlxsM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = ResetPass;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPass\");","map":{"version":3,"sources":["C:/Users/omG/OneDrive/Documents/GitHub/ballot_project/front_end/src/Components/ResetPass.js"],"names":["red","useState","Button","useNavigate","ResetPass","emailId","navigate","console","log","invalid","setInvalid","onSubmit","e","preventDefault","pass","target","password","value","cpass","cpassword","requestOptions","method","headers","body","JSON","stringify","response","fetch","then","resp","json","actualData","respdata","success","alert","setTimeout","color","fontSize","display"],"mappings":"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","sourcesContent":["import { red } from \"@mui/material/colors\";\nimport { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport '../Pages/reg.css'\nimport { useNavigate } from \"react-router-dom\";\n\n\nexport const ResetPass = ({emailId}) => {\n  let navigate = useNavigate();\n  console.log(emailId);\n  const [invalid,setInvalid] = useState();\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const pass = e.target.password.value\n    const cpass = e.target.cpassword.value\n\n    if(pass == cpass){\n    const requestOptions = {\n      method: \"put\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ emailId: emailId , password: e.target.password.value })\n    }\n\n      const response = await fetch('http://localhost:5000/users/updatepassword', requestOptions)\n        .then((resp) => resp.json())\n        .then((actualData) => {\n          return actualData\n        })\n\n      const respdata = response\n      console.log(respdata); \n      if (respdata.success === 1) {\n        alert(emailId + \" password updated succesfully\")\n        setTimeout(function() {\n          navigate(\"/\");\n      \n      }, 500)\n      }\n      else {\n        alert(\"email not updated\")\n        setInvalid('invalid')\n      }\n    }\n    else\n        setInvalid('invalid')\n\n  }\n\n  return (\n    \n    <div>\n    <form action=\"#\" onSubmit={onSubmit}>\n        <input type=\"text\" placeholder=\"Password\" required autoComplete=\"off\"  name=\"password\" className={invalid} />\n        <input type=\"password\" placeholder=\"Confirm Password\" required autoComplete=\"off\" name=\"cpassword\"  className={invalid}/>\n        <p style={{color:\"red\",fontSize:\"20px\",display:`${invalid ? \"block\" : \"none\"}`}}>something goes wrong</p>\n        <Button text=\"Update Password\">Update Password</Button>\n    </form>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}