{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omG\\\\OneDrive\\\\Documents\\\\GitHub\\\\ballot_project\\\\front_end\\\\src\\\\API\\\\APIProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const APIcontext = /*#__PURE__*/createContext();\nexport const APIProvider = props => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const local_userId = localStorage.getItem(\"userID\");\n  useEffect(() => {\n    getallQuery();\n  }, []);\n  const [ApiData, setApiData] = useState([//     {\n    //       queryId: 0,\n    //       query: \"Which programming languages you like?\",\n    //       options: [\"Python\", \"Java\", \"Javascript\", \"C#\"],\n    //       optionsId:['q0p0','q0p1','q0p2','q0p3'],\n    //       scores: [50, 30, 82, 30],\n    //       tVotes: 192,\n    //     },\n    //     {\n    //       queryId: 1,\n    //       query: \"Which Company you think is best?\",\n    //       options: [\"Google\", \"Oracle\", \"Tata\", \"Ford\", \"Infosys\"],\n    //       optionsId:['q0p0','q0p1','q0p2','q0p3'],\n    //       scores: [75, 65, 40, 30, 60],\n    //       tVotes: 270,\n    //     },\n    //     {\n    //       queryId: 2,\n    //       query: \"Which programming languages you like?\",\n    //       options: [\"Python\", \"Java\", \"Javascript\", \"C#\"],\n    //       optionsId:['q0p0','q0p1','q0p2','q0p3'],\n    //       scores: [50, 30, 82, 30],\n    //       tVotes: 192,\n    //     },\n  ]);\n\n  const getallQuery = async () => {\n    setIsLoading(true);\n    var array = [];\n    const idlist = await fetch(\"http://localhost:5000/vote/getidlist\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        userId: local_userId\n      })\n    }).then(resp1 => resp1.json()).then(idlist1 => idlist1); // console.log(idlist.data);\n\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:5000/query/getAllquery\").then(resp => resp.json()).then(actualData => {\n      return actualData;\n    });\n    const respQueries = allQuery.data;\n    await respQueries.map(async singleQuery => {\n      // console.log(singleQuery);\n      var q;\n      const query = singleQuery.queryName;\n      const id = singleQuery.queryId;\n      q = {\n        \"id\": id,\n        \"query\": query,\n        \"startDate\": singleQuery.querystartdate,\n        \"endDate\": singleQuery.queryenddate\n      };\n      const singlequeryoptions = await fetch(\"http://localhost:5000/options/getalloptions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          queryId: id\n        })\n      }).then(resp => resp.json()).then(async actualData => {\n        let alloptions = [];\n        const opt = await actualData.data.map(async singleoption => {\n          let firstOption = {\n            \"optionId\": singleoption.optionId,\n            \"optionName\": singleoption.options\n          };\n          const voteaddedoption = await fetch(\"http://localhost:5000/users/voteforsingleoption\", {\n            method: \"POST\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              optionId: singleoption.optionId\n            })\n          }).then(resp1 => resp1.json()).then(optiondata => {\n            firstOption = { ...firstOption,\n              \"totalvote\": optiondata.data[0].voteforsingleoption\n            };\n          });\n          alloptions.push(firstOption);\n          return firstOption;\n        });\n        let isvoted = false;\n        idlist.data.map(id => id.queryId == q.id ? isvoted = true : {});\n        q = { ...q,\n          \"options\": alloptions,\n          \"isUserVoted\": isvoted\n        };\n        array.push(q);\n        return actualData;\n      });\n      array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1);\n      return 1;\n    });\n    setTimeout(() => {\n      setIsLoading(false);\n      setApiData(array);\n    }, 2000); // console.log(array); \n  };\n\n  return /*#__PURE__*/_jsxDEV(APIcontext.Provider, {\n    value: [ApiData, setApiData],\n    isLoading: isLoading,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 10\n  }, this);\n};\n\n_s(APIProvider, \"bJaclU7TvBGrpgOhRguYSLEj5Wg=\");\n\n_c = APIProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"APIProvider\");","map":{"version":3,"sources":["C:/Users/omG/OneDrive/Documents/GitHub/ballot_project/front_end/src/API/APIProvider.js"],"names":["React","createContext","useState","useEffect","APIcontext","APIProvider","props","isLoading","setIsLoading","local_userId","localStorage","getItem","getallQuery","ApiData","setApiData","array","idlist","fetch","method","headers","body","JSON","stringify","userId","then","resp1","json","idlist1","console","log","allQuery","resp","actualData","respQueries","data","map","singleQuery","q","query","queryName","id","queryId","querystartdate","queryenddate","singlequeryoptions","alloptions","opt","singleoption","firstOption","optionId","options","voteaddedoption","optiondata","voteforsingleoption","push","isvoted","sort","a","b","Date","startDate","setTimeout","children"],"mappings":"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","sourcesContent":["import React, { createContext, useState,useEffect } from \"react\";\n \n\nexport const APIcontext = createContext();\n\n\nexport const APIProvider = props => {\n  const [isLoading,setIsLoading] = useState(false)\n  const local_userId = localStorage.getItem(\"userID\")\n  useEffect(() => \n   { getallQuery() }\n  , [])\n\n  const [ApiData, setApiData] = useState([\n    //     {\n    //       queryId: 0,\n    //       query: \"Which programming languages you like?\",\n    //       options: [\"Python\", \"Java\", \"Javascript\", \"C#\"],\n    //       optionsId:['q0p0','q0p1','q0p2','q0p3'],\n    //       scores: [50, 30, 82, 30],\n    //       tVotes: 192,\n    //     },\n    //     {\n    //       queryId: 1,\n    //       query: \"Which Company you think is best?\",\n    //       options: [\"Google\", \"Oracle\", \"Tata\", \"Ford\", \"Infosys\"],\n    //       optionsId:['q0p0','q0p1','q0p2','q0p3'],\n    //       scores: [75, 65, 40, 30, 60],\n    //       tVotes: 270,\n    //     },\n    //     {\n    //       queryId: 2,\n    //       query: \"Which programming languages you like?\",\n    //       options: [\"Python\", \"Java\", \"Javascript\", \"C#\"],\n    //       optionsId:['q0p0','q0p1','q0p2','q0p3'],\n    //       scores: [50, 30, 82, 30],\n    //       tVotes: 192,\n    //     },\n  ]);\n  \n\n  const getallQuery = async () => {\n    setIsLoading(true)\n\n    var array = [];\n\n    const idlist = await fetch(\"http://localhost:5000/vote/getidlist\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId: local_userId })\n    }).then((resp1) => resp1.json())\n      .then((idlist1) => idlist1)\n\n    // console.log(idlist.data);\n\n\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:5000/query/getAllquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n\n    const respQueries = allQuery.data;\n\n\n    await respQueries.map(async (singleQuery) => {\n      // console.log(singleQuery);\n      var q;\n\n      const query = singleQuery.queryName\n      const id = singleQuery.queryId\n      q = { \"id\": id, \"query\": query , \"startDate\" : singleQuery.querystartdate ,\"endDate\" : singleQuery.queryenddate }\n      \n\n      const singlequeryoptions = await fetch(\"http://localhost:5000/options/getalloptions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ queryId: id })\n\n      })\n        .then((resp) => resp.json())\n        .then(async (actualData) => {\n          let alloptions = []\n          const opt = await actualData.data.map(async (singleoption) => {\n            let firstOption = { \"optionId\": singleoption.optionId, \"optionName\": singleoption.options }\n\n            const voteaddedoption = await fetch(\"http://localhost:5000/users/voteforsingleoption\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ optionId: singleoption.optionId })\n            }).then((resp1) => resp1.json())\n              .then((optiondata) => {\n                firstOption = { ...firstOption, \"totalvote\": optiondata.data[0].voteforsingleoption }\n              })\n            alloptions.push(firstOption)\n            return firstOption\n          })\n\n          let isvoted = false;\n          idlist.data.map((id) => id.queryId == q.id ? isvoted = true : {})\n          q = { ...q, \"options\": alloptions, \"isUserVoted\": isvoted }\n          \n          array.push(q)\n\n          return actualData\n        })\n        array.sort((a,b) =>  new Date(a.startDate) < new Date(b.startDate) ? 1 : -1 )\n      return 1;\n    })\n    setTimeout(() => {\n      setIsLoading(false)\n      setApiData(array)\n    }, 2000)\n\n    // console.log(array); \n\n\n  }\n\n\n  return <APIcontext.Provider value={[ApiData, setApiData]} isLoading={isLoading}>{props.children}</APIcontext.Provider>;\n};\n"]},"metadata":{},"sourceType":"module"}