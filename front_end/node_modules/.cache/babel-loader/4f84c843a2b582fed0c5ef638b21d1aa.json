{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omG\\\\OneDrive\\\\Documents\\\\GitHub\\\\ballot_project\\\\front_end\\\\src\\\\Pages\\\\reg.js\",\n    _s = $RefreshSig$();\n\nimport \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar Reg = () => {\n  _s();\n\n  const [invalid, setInvalid] = useState();\n  let navigate = useNavigate(); // const  [c_password_error, updateC_password_error] = useState(\"\");\n\n  const [userreg, updateuserreg] = useState({\n    fistName: \"\",\n    lastName: \"\",\n    emailId: \"\",\n    password: \"\",\n    c_password: \"\"\n  });\n  const [records, updaterecord] = useState([]);\n\n  const handleInput = e => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    console.log(name + \" === \" + value);\n    updateuserreg({ ...userreg,\n      [name]: value\n    });\n    console.log(userreg); // console.log(userreg);\n  };\n\n  const onsubmit = async e => {\n    e.preventDefault(); //validation part is here to be written\n\n    try {\n      const pass_check = userreg.password === userreg.c_password ? true : false;\n\n      if (pass_check) {\n        const record_with_id = { ...userreg,\n          id: new Date().getTime().toString()\n        };\n        updaterecord([...records, record_with_id]);\n        const requestOptions = {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            firstName: userreg.firstName,\n            lastName: userreg.lastName,\n            emailId: userreg.emailId,\n            password: userreg.password\n          })\n        };\n        const reg = await fetch(\"http://localhost:5000/users/register\", requestOptions).then(response => response.json()).catch(data => alert(data));\n\n        if (reg.success == 1) {\n          updateuserreg({\n            firstName: \"\",\n            lastName: \"\",\n            emailId: \"\",\n            password: \"\",\n            c_password: \"\"\n          });\n          alert(reg.data);\n          navigate(\"/\");\n        } else {\n          alert(reg.data);\n        }\n      } else {\n        setInvalid('invalid');\n      }\n    } catch (error) {\n      alert(\"something went wrong \" + error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"reg\",\n      children: [/*#__PURE__*/_jsxDEV(Upperpart, {\n        top_heading: \"Start for free\",\n        heading: \"Create new account\",\n        bottom_heading: \"Already a member?\",\n        link: \"LogIn\",\n        href: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        onSubmit: onsubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Initals\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"First name\",\n            required: true,\n            autoComplete: \"off\",\n            value: userreg.firstName,\n            onChange: handleInput,\n            name: \"firstName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Last name\",\n            required: true,\n            autoComplete: \"off\",\n            value: userreg.lastName,\n            onChange: handleInput,\n            name: \"lastName\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"email-to-password\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"email\",\n            placeholder: \"Email\",\n            required: true,\n            autoComplete: \"off\",\n            value: userreg.emailId,\n            onChange: handleInput,\n            name: \"emailId\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Password\",\n            required: true,\n            autoComplete: \"off\",\n            value: userreg.password,\n            onChange: handleInput,\n            name: \"password\",\n            className: invalid,\n            min: \"8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Confirm Password\",\n            autoComplete: \"off\",\n            required: true,\n            value: userreg.c_password,\n            onChange: handleInput,\n            name: \"c_password\",\n            className: invalid // style={{c_password_error}}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              color: \"red\",\n              fontSize: \"20px\",\n              display: `${invalid ? '' : 'none'}`\n            },\n            children: \"password and conform password must match\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          text: \"Create account\",\n          display: \"none\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Reg, \"NycntXlYF/gp2w5fOlD9BeG3PeE=\", false, function () {\n  return [useNavigate];\n});\n\n_c = Reg;\nexport default Reg;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reg\");","map":{"version":3,"sources":["C:/Users/omG/OneDrive/Documents/GitHub/ballot_project/front_end/src/Pages/reg.js"],"names":["Button","Nav","Upperpart","Container","useState","useNavigate","Reg","invalid","setInvalid","navigate","userreg","updateuserreg","fistName","lastName","emailId","password","c_password","records","updaterecord","handleInput","e","name","target","value","console","log","onsubmit","preventDefault","pass_check","record_with_id","id","Date","getTime","toString","requestOptions","method","headers","body","JSON","stringify","firstName","reg","fetch","then","response","json","catch","data","alert","success","error","color","fontSize","display"],"mappings":"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","sourcesContent":["import \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nvar Reg = () => {\n  const [invalid, setInvalid] = useState();\n  let navigate = useNavigate();\n  // const  [c_password_error, updateC_password_error] = useState(\"\");\n  const [userreg, updateuserreg] = useState({\n    fistName: \"\",\n    lastName: \"\",\n    emailId: \"\",\n    password: \"\",\n    c_password: \"\",\n  });\n\n  const [records, updaterecord] = useState([]);\n\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    console.log(name + \" === \" + value);\n    updateuserreg({ ...userreg, [name]: value });\n    console.log(userreg);\n    // console.log(userreg);\n  };\n  const onsubmit = async (e) => {\n    e.preventDefault();\n    //validation part is here to be written\n    try {\n        const pass_check = userreg.password === userreg.c_password ? true : false;\n      if (pass_check) {\n        const record_with_id = { ...userreg, id: new Date().getTime().toString() };\n        updaterecord([...records, record_with_id]);\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ firstName: userreg.firstName, lastName: userreg.lastName, emailId: userreg.emailId, password: userreg.password }),\n        };\n\n      const reg = await  fetch(\"http://localhost:5000/users/register\", requestOptions)\n          .then((response) => response.json())\n          .catch(data => alert(data));\n\n          if(reg.success == 1)\n            { updateuserreg({ firstName: \"\", lastName: \"\", emailId: \"\", password: \"\", c_password: \"\" });\n              alert(reg.data)\n              navigate(\"/\");\n            }\n          else{\n            alert(reg.data)\n          }  \n\n      } else {\n        setInvalid('invalid')\n      }\n      \n        \n    } catch (error) {\n      alert(\"something went wrong \"+error)\n    }\n  };\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg\">\n        <Upperpart top_heading=\"Start for free\" heading=\"Create new account\" bottom_heading=\"Already a member?\" link=\"LogIn\" href=\"/\" />\n        <form action=\"#\" onSubmit={onsubmit}>\n          <div className=\"Initals\">\n            <input type=\"text\" placeholder=\"First name\" required autoComplete=\"off\" value={userreg.firstName} onChange={handleInput} name=\"firstName\" />\n            <input type=\"text\" placeholder=\"Last name\" required autoComplete=\"off\" value={userreg.lastName} onChange={handleInput} name=\"lastName\" />\n          </div>\n          <div className=\"email-to-password\">\n            <input type=\"email\" placeholder=\"Email\" required autoComplete=\"off\" value={userreg.emailId} onChange={handleInput} name=\"emailId\" />\n            <input type=\"password\" placeholder=\"Password\" required autoComplete=\"off\" value={userreg.password} onChange={handleInput} name=\"password\" className={invalid} min=\"8\" />\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              autoComplete=\"off\"\n              required\n              value={userreg.c_password}\n              onChange={handleInput}\n              name=\"c_password\"\n              className={invalid}\n            // style={{c_password_error}}\n            />\n            <p style={{ color: \"red\", fontSize: \"20px\", display: `${invalid ? '' : 'none'}` }}>password and conform password must match</p>\n          </div>\n          <Button text=\"Create account\" display=\"none\" />\n        </form>\n      </Container>\n    </>\n  );\n};\nexport default Reg;\n"]},"metadata":{},"sourceType":"module"}