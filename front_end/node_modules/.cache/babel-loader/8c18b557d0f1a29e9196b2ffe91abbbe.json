{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\omG\\\\OneDrive\\\\Documents\\\\GitHub\\\\ballot_project\\\\front_end\\\\src\\\\Pages\\\\CreateQuery.js\",\n    _s = $RefreshSig$();\n\nimport Nav from \"../Components/nav\";\nimport \"./CreateQuery.css\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"../UI/Button\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\"; // import { useNavigate } from \"react-router-dom\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CreateQuery = () => {\n  _s();\n\n  let navigate = useNavigate();\n  const [options, addOptions] = useState([1, 2]);\n  const [query, setQuery] = useState({\n    queryName: \"\",\n    queryStartDate: \"\",\n    queryEndDate: \"\"\n  });\n\n  const fetchFunction = async query => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ ...query\n      })\n    };\n\n    try {\n      const done = await fetch(\"http://localhost:5000/Query/addquery\", requestOptions);\n      const data = await done.json();\n\n      if (data.success) {\n        const querId = data.data.insertId;\n        return querId;\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const postOptions = async options => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({ ...options\n      })\n    };\n\n    try {\n      const done = await fetch(\"http://localhost:5000/Query/addoptions\", requestOptions);\n      const data = await done.json();\n\n      if (data.success) {\n        if (data.success === 1) {\n          console.log(`Options ${options.options} is added to Database successfully.`);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const createOption = () => {\n    options.length < 6 ? addOptions([...options, 1]) : alert(\"Only 6 Options are allowed!\");\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    var currentTime = new Date();\n    const endTime = new Date(); // The Date object returns today's timestamp\n\n    endTime.setDate(endTime.getDate() + 2); // console.log(endTime);\n\n    var date = (\"0\" + currentTime.getDate()).slice(-2);\n    var month = (\"0\" + (currentTime.getMonth() + 1)).slice(-2);\n    var thisYear = currentTime.getFullYear();\n    let hours = currentTime.getHours();\n    let minutes = currentTime.getMinutes();\n    let seconds = currentTime.getSeconds();\n    var date1 = (\"0\" + endTime.getDate()).slice(-2);\n    var month1 = (\"0\" + (endTime.getMonth() + 1)).slice(-2);\n    var thisYear1 = endTime.getFullYear();\n    let hours1 = endTime.getHours();\n    let minutes1 = endTime.getMinutes();\n    let seconds1 = endTime.getSeconds();\n    var todaydate = thisYear + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds;\n    var enddate = thisYear1 + \"-\" + month1 + \"-\" + date1 + \" \" + hours1 + \":\" + minutes1 + \":\" + seconds1;\n    const queryName = document.getElementById(\"query\").value;\n    const qarray = {\n      queryName: queryName,\n      queryStartDate: todaydate,\n      queryEndDate: enddate\n    }; // console.log(qarray);\n\n    try {\n      const queryPromise = await fetchFunction(qarray);\n      const queryId = queryPromise.PromiseResult; // console.log(queryPromise);\n\n      setTimeout(() => {\n        options.map((currElem, index) => {\n          const option = document.getElementById(`${index}`).value;\n          const optionObj = {\n            queryId: queryPromise,\n            options: option\n          };\n          postOptions(optionObj);\n        });\n        alert(\"query added successfully\");\n        navigate(\"/homepage\");\n        window.location.reload();\n      }, 1000);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const homepage = [\"Homepage\", \"/homepage\"];\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      logedin: \"true\",\n      firstName: \"A\",\n      homepage: homepage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      className: \"createQuery_wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        className: \"createQuery_form\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Query\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"(500 characters only!)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Input your question here\",\n          id: \"query\",\n          required: true,\n          autoComplete: \"off\",\n          name: \"firstName\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Options\", /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"(150 characters only!)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"optionsButton_wrap\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"optionWrap\",\n            children: options.map((currElem, index) => {\n              return /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                placeholder: \"Input your option here\",\n                id: index,\n                required: true,\n                autoComplete: \"off\",\n                name: index\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 24\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            onClick: createOption,\n            id: \"buttonWrap\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              text: \"Options\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submitButton\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            display: \"none\",\n            text: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CreateQuery, \"ONC3FqvxiG5cv8/5faJHglqzFec=\", false, function () {\n  return [useNavigate];\n});\n\n_c = CreateQuery;\nexport default CreateQuery;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateQuery\");","map":{"version":3,"sources":["C:/Users/omG/OneDrive/Documents/GitHub/ballot_project/front_end/src/Pages/CreateQuery.js"],"names":["Nav","Container","Button","useState","useNavigate","CreateQuery","navigate","options","addOptions","query","setQuery","queryName","queryStartDate","queryEndDate","fetchFunction","requestOptions","method","headers","body","JSON","stringify","done","fetch","data","json","success","querId","insertId","err","console","log","postOptions","createOption","length","alert","handleSubmit","e","preventDefault","currentTime","Date","endTime","setDate","getDate","date","slice","month","getMonth","thisYear","getFullYear","hours","getHours","minutes","getMinutes","seconds","getSeconds","date1","month1","thisYear1","hours1","minutes1","seconds1","todaydate","enddate","document","getElementById","value","qarray","queryPromise","queryId","PromiseResult","setTimeout","map","currElem","index","option","optionObj","window","location","reload","homepage"],"mappings":"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","sourcesContent":["import Nav from \"../Components/nav\";\nimport \"./CreateQuery.css\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"../UI/Button\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// import { useNavigate } from \"react-router-dom\";\n\nconst CreateQuery = () => {\n  let navigate = useNavigate();\n  const [options, addOptions] = useState([1, 2]);\n  const [query, setQuery] = useState({\n    queryName: \"\",\n    queryStartDate: \"\",\n    queryEndDate: \"\",\n  });\n  const fetchFunction = async (query) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...query }),\n    };\n    try {\n      const done = await fetch(\"http://localhost:5000/Query/addquery\", requestOptions);\n      const data = await done.json();\n      if (data.success) {\n        const querId = data.data.insertId;\n        return querId;\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const postOptions = async (options) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...options }),\n    };\n    try {\n      const done = await fetch(\"http://localhost:5000/Query/addoptions\", requestOptions);\n      const data = await done.json();\n      if (data.success) {\n        if (data.success === 1) {\n          console.log(`Options ${options.options} is added to Database successfully.`);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createOption = () => {\n    options.length < 6 ? addOptions([...options, 1]) : alert(\"Only 6 Options are allowed!\");\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    var currentTime = new Date();\n    const endTime = new Date(); // The Date object returns today's timestamp\n    endTime.setDate(endTime.getDate() + 2);\n\n\n    // console.log(endTime);\n    var date = (\"0\" + currentTime.getDate()).slice(-2)\n    var month = (\"0\" + (currentTime.getMonth() + 1)).slice(-2);\n    var thisYear = currentTime.getFullYear();\n    let hours = currentTime.getHours()\n    let minutes = currentTime.getMinutes()\n    let seconds = currentTime.getSeconds();\n\n    var date1 = (\"0\" + endTime.getDate()).slice(-2)\n    var month1 = (\"0\" + (endTime.getMonth() + 1)).slice(-2);\n    var thisYear1 = endTime.getFullYear();\n    let hours1 = endTime.getHours()\n    let minutes1 = endTime.getMinutes()\n    let seconds1 = endTime.getSeconds();\n\n    var todaydate = thisYear + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds\n    var enddate = thisYear1 + \"-\" + month1 + \"-\" + date1 + \" \" + hours1 + \":\" + minutes1 + \":\" + seconds1\n    const queryName = document.getElementById(\"query\").value;\n\n    const qarray = { queryName: queryName, queryStartDate: todaydate, queryEndDate: enddate };\n    // console.log(qarray);\n    try {\n      const queryPromise = await fetchFunction(qarray);\n      const queryId = queryPromise.PromiseResult;\n      // console.log(queryPromise);\n      setTimeout(() => {\n        options.map((currElem, index) => {\n          const option = document.getElementById(`${index}`).value;\n          const optionObj = { queryId: queryPromise, options: option };\n          postOptions(optionObj);\n        });\n        alert(\"query added successfully\")\n        \n        navigate(\"/homepage\")\n        window.location.reload()\n      }, 1000);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const homepage = [\"Homepage\", \"/homepage\"];\n  return (\n    <>\n      <Nav logedin=\"true\" firstName=\"A\" homepage={homepage} />\n      <Container className=\"createQuery_wrap\">\n        <form onSubmit={handleSubmit} className=\"createQuery_form\">\n          <p>\n            Query<span>(500 characters only!)</span>\n          </p>\n          <input type=\"text\" placeholder=\"Input your question here\" id=\"query\" required autoComplete=\"off\" name=\"firstName\" />\n          <p>\n            Options<span>(150 characters only!)</span>\n          </p>\n          <div className=\"optionsButton_wrap\">\n            <div className=\"optionWrap\">\n              {options.map((currElem, index) => {\n                return <input type=\"text\" placeholder=\"Input your option here\" id={index} required autoComplete=\"off\" name={index} key={index} />;\n              })}\n            </div>\n            <div onClick={createOption} id=\"buttonWrap\">\n              <Button text=\"Options\" />\n            </div>\n          </div>\n          <div className=\"submitButton\">\n            <Button display=\"none\" text=\"Submit\" />\n          </div>\n        </form>\n      </Container>\n    </>\n  );\n};\n\nexport default CreateQuery;\n"]},"metadata":{},"sourceType":"module"}