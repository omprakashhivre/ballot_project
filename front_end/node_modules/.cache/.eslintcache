[{"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\index.js":"1","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\App.js":"2","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ForgotPass.js":"3","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Vote.js":"4","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Login.js":"5","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\CreateQuery.js":"6","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\reg.js":"7","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Ahomepage.js":"8","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\API\\APIProvider.js":"9","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\nav.js":"10","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Upper_part.js":"11","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\LoadingSpinner.js":"12","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\UI\\Button.js":"13","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ResetPass.js":"14","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Frame.js":"15","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Pagination.js":"16","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Overlay.js":"17"},{"size":266,"mtime":1653383563018,"results":"18","hashOfConfig":"19"},{"size":3779,"mtime":1655439511739,"results":"20","hashOfConfig":"19"},{"size":5882,"mtime":1655439530518,"results":"21","hashOfConfig":"19"},{"size":5996,"mtime":1655439500368,"results":"22","hashOfConfig":"19"},{"size":3206,"mtime":1655439571854,"results":"23","hashOfConfig":"19"},{"size":5232,"mtime":1655439502439,"results":"24","hashOfConfig":"19"},{"size":5360,"mtime":1655439505795,"results":"25","hashOfConfig":"19"},{"size":11036,"mtime":1655439495983,"results":"26","hashOfConfig":"19"},{"size":2351,"mtime":1654052756314,"results":"27","hashOfConfig":"19"},{"size":1729,"mtime":1654444013660,"results":"28","hashOfConfig":"19"},{"size":1228,"mtime":1653384574546,"results":"29","hashOfConfig":"19"},{"size":216,"mtime":1653384532652,"results":"30","hashOfConfig":"19"},{"size":382,"mtime":1655405275717,"results":"31","hashOfConfig":"19"},{"size":2702,"mtime":1655439541276,"results":"32","hashOfConfig":"19"},{"size":4170,"mtime":1654686881221,"results":"33","hashOfConfig":"19"},{"size":3468,"mtime":1654074806191,"results":"34","hashOfConfig":"19"},{"size":737,"mtime":1654505036351,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"yb96t1",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"39"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\index.js",[],[],["94","95"],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\App.js",["96","97","98"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ForgotPass.js",["99","100"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Vote.js",["101","102","103","104","105","106","107","108","109","110"],["111"],"import Nav from \"./nav\";\nimport React from 'react'\nimport { Frame } from './Frame'\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from 'react'\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport Container from \"@mui/material/Container\";\nimport '../Pages/Ahomepage.css'\nimport Pagination from \"../Pages/Pagination\";\n\n//toastify\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst Vote = () => {\n  let navigate = useNavigate();\n  useEffect(() => {\n    if (localStorage.getItem(\"userID\")) {\n      if (localStorage.getItem(\"userID\") == 1) {\n        console.log(\"admin logged\");\n        navigate(\"/homepage\")\n      }\n      else if (localStorage.getItem(\"userID\") > 1)\n        console.log(\"user logged\");\n      getallQuery()\n    }\n    else\n      navigate(\"/\")\n  }, [1])\n\n  const local_userId = localStorage.getItem(\"userID\")\n  const [frame, setFrame] = useState([])\n  const [isLoading, setIsLoading] = useState(false);\n  const [fframe, setFFrame] = useState([])\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(2);\n\n\n  const getallQuery = async () => {\n    setIsLoading(true)\n\n    var array = [];\n\n    const idlist = await fetch(\"http://3.6.191.95:3000/users/getidlist?userId=\" + local_userId)\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://3.6.191.95:3000/users/getfilteredquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n      console.log(allQuery);\n\n    const respQueries = allQuery.data;\n\n    respQueries.map(async (singleQuery) => {\n      var q;\n      const query = singleQuery.queryname\n      const id = singleQuery.queryId\n      let option = singleQuery.options\n      q = { \"id\": id, \"query\": query, \"startDate\": singleQuery.querystartdate, \"endDate\": singleQuery.queryenddate, isExpired: false }\n\n      const _option = []\n\n      option.map(async (singleoption) => {\n        const oid = singleoption.optionId\n        let firstOption = { \"optionId\": oid, \"optionName\": singleoption.options }\n\n        const votes = await fetch(\"http://3.6.191.95:3000/users/voteforsingleoption?optionId=\" + oid)\n          .then((resp) => resp.json())\n          .then((actualData) => {\n            return actualData\n          })\n\n        firstOption = { ...firstOption, \"totalvote\": votes.voteforsingleoption }\n        _option.push(firstOption)\n        return firstOption\n      })\n\n      // console.log(_option);\n      let isvoted = false;\n      await idlist.map((single) => {\n        // eslint-disable-next-line no-unused-expressions\n        single.queryId == id ? isvoted = true : isvoted\n      })\n      q = { ...q, \"option\": _option, \"isUserVoted\": isvoted }\n\n\n      // console.log(q);\n      array.push(q)\n      return null;\n    })\n    // console.log(array);\n    array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1)\n\n    setTimeout(() => {\n      setFrame(array)\n      // setFFrame(array)\n      setIsLoading(false)\n      console.log(frame);\n    }, 1200)\n    // console.log(array)\n\n\n  }\n\n  const setVote = (qid, optionId) => {\n    // console.log(local_userId + \" == \" + \"qid == \" + qid + \" option == \" + optionId);\n    // console.log(\"query id \" + qid + \" optionId \" + optionId);\n    setFrame(frame.map((vote) => (vote.id == qid ? { ...vote, option: vote.option.map((opt) => opt.optionId == optionId ? { ...opt, totalvote: opt.totalvote + 1 } : opt), isUserVoted: true } : vote)));\n    // console.log(data);\n    fetch(\"http://3.6.191.95:3000/users/castvote\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ queryId: qid, optionId: optionId, userId: local_userId })\n    })\n    toast.success('Thanks for voting...!', {\n      position: \"bottom-right\",\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n   \n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  //pagination \n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  let currentPosts = (frame.slice(indexOfFirstPost, indexOfLastPost))\n\n  return (\n    <>\n      <Nav logedin=\"\" firstName={localStorage.getItem(\"firstname\") || \"X\"} lastName={localStorage.getItem(\"lastname\") || \"X\"}/>\n\n      <form onSubmit={handleSubmit} className=\"Ahomepage_form\">\n        <Container className=\"reg\" id=\"Outer_container\">\n          <Container className=\"Inner_container\">\n\n            {\n              isLoading ? <LoadingSpinner /> :\n                <>\n                  {\n                    frame.length > 0 ?\n                      currentPosts.map((vote, index) => {\n                        if (new Date(vote.endDate) > new Date())\n                          return <Frame key={vote.id} index={index+indexOfFirstPost} vote={vote} setVote={setVote} />\n\n                      }\n                      ) : <h2 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\" , fontFamily:\"Poppins\" }}>currently no active ballots for vote...</h2>\n                  }\n                </>\n\n            }\n          </Container>\n        </Container>\n      </form>\n      {\n       fframe.length <= currentPosts.length ?\n        <Pagination postsPerPage={postsPerPage} totalPosts={frame.length} paginate={paginate} style={{ position: \"absolute\", bottom: \"20px\" }} /> :\n        <></>\n\n      }\n      \n\n      <ToastContainer\n        position=\"bottom-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n\n    </>\n  )\n}\n\nexport default Vote\n",["112","113"],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Login.js",["114","115"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\CreateQuery.js",["116","117","118"],[],"import Nav from \"../Components/nav\";\nimport \"./CreateQuery.css\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"../UI/Button\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\n//toastify\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst CreateQuery = () => {\n  let navigate = useNavigate();\n  const [options, addOptions] = useState([1, 2]);\n  const [QueryFirstname, setQueryFirstname] = useState('');\n\n\n  const handleChange = (e) => {\n    setQueryFirstname(e.target.value)\n  }\n\n  const fetchFunction = async (query) => {\n    console.log(query);\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(query),\n    };\n    try {\n      const done = await fetch(\"http://3.6.191.95:3000/users/addquery\", requestOptions);\n      console.log(done);\n      const data = await done.json();\n      if (data.status) {\n        // const querId = data.data.insertId;\n        toast.success('Query Added successfully!', {\n          position: \"bottom-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        // return querId;\n        console.log(data);\n      }\n    } catch (err) {\n      console.log(err);\n      toast.error('Unable to add query, Try again later...', {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      console.log(err);\n    }\n  };\n\n  const createOption = () => {\n    options.length < 6 ? addOptions([...options, 1]) :\n      // options.length > 2 ? document.getElementById('deleteOption').style.display = 'block' :\n      toast.warn('Only six option allowed to add.', {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      })\n  };\n  // update\n  const deleteOption = () => {\n    // update\n    options.length > 2 ? addOptions(options.slice(0, -1)) :\n      toast.warn('Minimum 2 options Required', {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // var currentTime = new Date();\n    const endTime = new Date(); // The Date object returns today's timestamp\n    endTime.setDate(endTime.getDate() + 2);\n\n    var date1 = (\"0\" + endTime.getDate()).slice(-2)\n    var month1 = (\"0\" + (endTime.getMonth() + 1)).slice(-2);\n    var thisYear1 = endTime.getFullYear();\n    let hours1 = endTime.getHours()\n    let minutes1 = endTime.getMinutes()\n    let seconds1 = endTime.getSeconds();\n\n\n    let enddate = thisYear1 + \"-\" + month1 + \"-\" + date1 + \" \" + hours1 + \":\" + minutes1 + \":\" + seconds1\n\n    const queryName = document.getElementById(\"query\").value;\n    const _option = []\n    options.map((currElem, index) => {\n      const option = document.getElementById(`${index}`).value;\n      _option.push(option)\n    });\n    const query = { queryName: queryName, queryenddate: enddate, \"options\": _option };\n    // console.log(qarray);\n    try {\n      await fetchFunction(query);\n      // navigate(\"/homepage\")\n\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const homepage = [\"Homepage\", \"/homepage\"];\n  return (\n    <>\n      <Nav logedin=\"true\" firstName=\"A\" />\n      <Container className=\"createQuery_wrap\">\n        <form onSubmit={handleSubmit} className=\"createQuery_form\">\n          <p>\n            Query<span>(500 characters only!)</span>\n          </p>\n\n          <input type=\"text\" placeholder=\"Input your question here\" id=\"query\" required autoComplete=\"off\" name=\"firstname\" max={500} onChange={handleChange} />\n          <div className=\"styled\">\n            <p>{QueryFirstname}</p>\n          </div>\n\n          <p>\n            Options<span>(150 characters only!)</span>\n          </p>\n          <div className=\"optionsButton_wrap\">\n            <div className=\"optionWrap\">\n              {options.map((currElem, index) => {\n                return <input type=\"text\" placeholder=\"Input your option here\" id={index} required autoComplete=\"off\" name={index} key={index} max={150} />;\n              })}\n            </div>\n            {/* update */}\n            <div>\n              <div onClick={createOption} id=\"buttonWrap\" style={{marginBottom:'1.5rem'}}>\n                <Button text=\"Add Options\" />\n              </div>\n              {\n                options.length > 2 ? <div onClick={deleteOption} id=\"deleteOption\">\n                  <Button text=\"Remove Options\" />\n                </div> : ''\n              }\n\n            </div>\n\n          </div>\n          <div className=\"submitButton\">\n            <Button display=\"none\" text=\"Submit\" />\n          </div>\n        </form>\n      </Container>\n\n      \n    </>\n  );\n};\n\n\nexport default CreateQuery;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\reg.js",["119"],[],"import \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n//toastify\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nvar Reg = () => {\n  const [invalid, setInvalid] = useState();\n  let navigate = useNavigate();\n  // const  [c_password_error, updateC_password_error] = useState(\"\");\n  const [userReg, updateuserReg] = useState({\n    fistName: \"\",\n    lastName: \"\",\n    emailId: \"\",\n    password: \"\",\n    c_password: \"\",\n  });\n\n  const [records, updateRecord] = useState([]);\n\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    console.log(name + \" === \" + value);\n    updateuserReg({ ...userReg, [name]: value });\n    console.log(userReg);\n    // console.log(userReg);\n  };\n  const onsubmit = async (e) => {\n    e.preventDefault();\n    console.log(userReg);\n    //validation part is here to be written\n    try {\n        const pass_check = userReg.password == userReg.c_password ? true : false;\n      if (pass_check) {\n        console.log(\"password matches\");\n        const record_with_id = { ...userReg, id: new Date().getTime().toString() };\n        updateRecord([...records, record_with_id]);\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ firstName: userReg.firstName, lastName: userReg.lastName, email: userReg.emailId, password: userReg.password }),\n        };\n\n      const reg = await  fetch(\"http://3.6.191.95:3000/users/register\", requestOptions)\n          .then((response) => response.json())\n          .catch(xy => console.log(xy))\n\n          if(reg.status === 1)\n            { updateuserReg({ firstName: \"\", lastName: \"\", emailId: \"\", password: \"\", c_password: \"\" });\n              // alert(reg.data)\n              console.log(reg.data);\n              toast.success(`Registered Successfully, please Login`, {\n                position: \"bottom-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              navigate(\"/\");\n            }\n          else{\n            console.log(reg.data)\n          }  \n\n      } else {\n        setInvalid('invalid')\n        toast.warn('Passsword not matches', {\n          position: \"bottom-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n      \n        \n    } catch (error) {\n      toast.error('Error : '+error, {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg\">\n        <Upperpart top_heading=\"Start for free\" heading=\"Create new account\" bottom_heading=\"Already a member?\" link=\"LogIn\" href=\"/\" />\n        <form action=\"#\" onSubmit={onsubmit}>\n          <div className=\"Initals\">\n            <input type=\"text\" placeholder=\"First name\" required autoComplete=\"off\" value={userReg.firstName} onChange={handleInput} name=\"firstName\" />\n            <input type=\"text\" placeholder=\"Last name\" required autoComplete=\"off\" value={userReg.lastName} onChange={handleInput} name=\"lastName\" />\n          </div>\n          <div className=\"email-to-password\">\n            <input type=\"email\" placeholder=\"Email\" required autoComplete=\"off\" value={userReg.emailId} onChange={handleInput} name=\"emailId\" />\n            {/* <Button text='Send Otp' onC\n            {\n              <imput type='number' min={1} max={7} required  />\n              isOtpREceived ? <Button text=\"Verify Otp\" display=\"block\" />\n               : <Button text=\"Resend\" display=\"block\" />\n            } */}\n            \n            \n\n\n            <input type=\"password\" placeholder=\"Password\" required autoComplete=\"off\" value={userReg.password} onChange={handleInput} name=\"password\" className={invalid} min=\"8\" />\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              autoComplete=\"off\"\n              required\n              value={userReg.c_password}\n              onChange={handleInput}\n              name=\"c_password\"\n              className={invalid}\n            // style={{c_password_error}}\n            />\n\n            <p style={{ color: \"red\", fontSize: \"20px\", display: `${invalid ? '' : 'none'}` }}>password and conform password must match</p>\n          </div>\n          <Button text=\"Create account\" display=\"none\" />\n        </form>\n      </Container>\n      {/* <ToastContainer\n        position=\"bottom-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      /> */}\n    </>\n  );\n};\nexport default Reg;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Ahomepage.js",["120","121","122","123","124","125","126","127","128"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\API\\APIProvider.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\nav.js",["129","130"],[],"import \"./nav.css\";\nimport { Link } from \"react-router-dom\";\n\nvar Nav = (props) => {\n  var isAdmin = localStorage.getItem(\"userID\") == 1 ? true : false;\n  var logedin;\n  var firstName;\n  var lastName;\n  var ishomepage = false;\n  props.homepage === undefined ? (ishomepage = false) : (ishomepage = true);\n  props.logedin === undefined ? (logedin = false) : (logedin = true);\n  props.firstName === undefined ? (firstName = \" \") : (firstName = props.firstName);\n  props.lastName === undefined ? (lastName = \" \") : (lastName = props.lastName);\n  var pp = firstName.split(\"\")[0].toUpperCase() + lastName.split(\"\")[0].toUpperCase();\n  return (\n    <nav className=\"navbar-light fluid\">\n      {isAdmin ?\n        <Link to={'/homepage'}><div style={{ display: \"inline-flex\" }} >\n          <div className=\"img-size\">\n          </div>\n          <span className=\" header\">Ballot</span>\n        </div>\n        </Link> :\n        <Link to={'/allframes'}><div style={{ display: \"inline-flex\" }} >\n          <div className=\"img-size\">\n          </div>\n          <span className=\" header\">Ballot</span>\n        </div>\n        </Link>\n      }\n    \n      {logedin ? (\n        <div id=\"imgSpan_wrap\">\n          {/* {ishomepage ? (\n            <Link to={props.homepage[1]} className=\"logoutSpan\">\n              {props.homepage[0]}\n            </Link>\n          ) : (\n            <span></span>\n          )} */}\n          <span id=\"profile_pic\">{pp}</span>\n          <Link to={\"/\"} className=\"logoutSpan\" onClick={() => { localStorage.clear() }}>\n            <span>logout</span>\n          </Link>\n        </div>\n      ) : (\n        <span></span>\n      )}\n    </nav>\n  );\n};\nexport default Nav;\n\n// navbar-expand-lg\n// navbar\n// container\n// navbar-brand\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Upper_part.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\LoadingSpinner.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\UI\\Button.js",["131"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ResetPass.js",["132"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Frame.js",["133","134","135","136","137","138","139","140"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Pagination.js",["141"],[],"// import ReactDOM from 'react-dom'\r\n// import ReactPaginate from 'react-paginate';\r\n// import { useState , useEffect } from 'react';\r\n// import Ahomepage from './Ahomepage';\r\n\r\n\r\n// function PaginatedItems({ itemsPerPage }) {\r\n//     // We start with an empty list of items.\r\n//     const [currentItems, setCurrentItems] = useState(null);\r\n//     const [pageCount, setPageCount] = useState(0);\r\n//     // Here we use item offsets; we could also use page offsets\r\n//     // following the API or data you're working with.\r\n//     const [itemOffset, setItemOffset] = useState(0);\r\n  \r\n//     useEffect(() => {\r\n//       // Fetch items from another resources.\r\n//       const endOffset = itemOffset + itemsPerPage;\r\n//       console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n//       setCurrentItems(frame.slice(itemOffset, endOffset));\r\n//       setPageCount(Math.ceil(frame.length / itemsPerPage));\r\n//     }, [itemOffset, itemsPerPage]);\r\n  \r\n//     // Invoke when user click to request another page.\r\n//     const handlePageClick = (event) => {\r\n//       const newOffset = (event.selected * itemsPerPage) % frame.length;\r\n//       console.log(\r\n//         `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n//       );\r\n//       setItemOffset(newOffset);\r\n//     };\r\n  \r\n//     return (\r\n//       <>\r\n//         <Ahomepage currentItems={currentItems} />\r\n//         <ReactPaginate\r\n//           breakLabel=\"...\"\r\n//           nextLabel=\"next >\"\r\n//           onPageChange={handlePageClick}\r\n//           pageRangeDisplayed={5}\r\n//           pageCount={pageCount}\r\n//           previousLabel=\"< previous\"\r\n//           renderOnZeroPageCount={null}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n  \r\n//   // Add a <div id=\"container\"> to your HTML to see the componend rendered.\r\n//   ReactDOM.render(\r\n//     <PaginatedItems itemsPerPage={4} />,\r\n//     document.getElementById('container')\r\n//   );\r\n\r\nimport React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n  \r\n    \r\n  \r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n//   const [itemOffset, setItemOffset] = useState(0);\r\n//   const handlePageClick = (event) => {\r\n//           const newOffset = (event.selected * postsPerPage) % totalPosts;\r\n//           console.log(\r\n//             `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n//           );\r\n//           paginate(newOffset);\r\n//         };\r\nconst selected = (e) =>{\r\n}\r\n  return (\r\n    // <ReactPaginate\r\n    //           breakLabel=\"...\"\r\n    //           nextLabel=\"next >\"\r\n    //           onPageChange={handlePageClick}\r\n    //           pageRangeDisplayed={postsPerPage}\r\n    //           pageCount={totalPosts/postsPerPage}\r\n    //           previousLabel=\"< previous\"\r\n    //           renderOnZeroPageCount={null}\r\n    //         />\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} \r\n            style={{cursor:\"pointer\",fontSize:\"25px\",paddingTop:\"3px\",paddingRight:\"10px\",paddingLeft:\"10px\"}} \r\n            className='page-link'\r\n            onSelect={selected}\r\n            >\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Overlay.js",[],[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":3,"column":25,"nodeType":"148","messageId":"149","endLine":3,"endColumn":33},{"ruleId":"146","severity":1,"message":"150","line":4,"column":10,"nodeType":"148","messageId":"149","endLine":4,"endColumn":18},{"ruleId":"146","severity":1,"message":"151","line":15,"column":26,"nodeType":"148","messageId":"149","endLine":15,"endColumn":31},{"ruleId":"146","severity":1,"message":"152","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":15},{"ruleId":"153","severity":1,"message":"154","line":93,"column":13,"nodeType":"155","messageId":"156","endLine":93,"endColumn":15},{"ruleId":"153","severity":1,"message":"154","line":21,"column":42,"nodeType":"155","messageId":"156","endLine":21,"endColumn":44},{"ruleId":"157","severity":1,"message":"158","line":31,"column":6,"nodeType":"159","endLine":31,"endColumn":9,"suggestions":"160"},{"ruleId":"157","severity":1,"message":"161","line":31,"column":7,"nodeType":"162","endLine":31,"endColumn":8},{"ruleId":"146","severity":1,"message":"163","line":36,"column":18,"nodeType":"148","messageId":"149","endLine":36,"endColumn":27},{"ruleId":"146","severity":1,"message":"164","line":38,"column":24,"nodeType":"148","messageId":"149","endLine":38,"endColumn":39},{"ruleId":"165","severity":1,"message":"166","line":87,"column":33,"nodeType":"167","messageId":"168","endLine":87,"endColumn":35},{"ruleId":"153","severity":1,"message":"154","line":89,"column":24,"nodeType":"155","messageId":"156","endLine":89,"endColumn":26},{"ruleId":"153","severity":1,"message":"154","line":115,"column":43,"nodeType":"155","messageId":"156","endLine":115,"endColumn":45},{"ruleId":"153","severity":1,"message":"154","line":115,"column":109,"nodeType":"155","messageId":"156","endLine":115,"endColumn":111},{"ruleId":"165","severity":1,"message":"169","line":157,"column":54,"nodeType":"167","messageId":"170","endLine":157,"endColumn":56},{"ruleId":"171","severity":2,"message":"172","line":89,"column":9,"nodeType":"173","messageId":"174","endLine":89,"endColumn":56,"suppressions":"175"},{"ruleId":"142","replacedBy":"176"},{"ruleId":"144","replacedBy":"177"},{"ruleId":"146","severity":1,"message":"178","line":17,"column":10,"nodeType":"148","messageId":"149","endLine":17,"endColumn":19},{"ruleId":"153","severity":1,"message":"154","line":65,"column":23,"nodeType":"155","messageId":"156","endLine":65,"endColumn":25},{"ruleId":"146","severity":1,"message":"179","line":14,"column":7,"nodeType":"148","messageId":"149","endLine":14,"endColumn":15},{"ruleId":"165","severity":1,"message":"166","line":109,"column":35,"nodeType":"167","messageId":"168","endLine":109,"endColumn":37},{"ruleId":"146","severity":1,"message":"180","line":124,"column":9,"nodeType":"148","messageId":"149","endLine":124,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":41,"column":45,"nodeType":"155","messageId":"156","endLine":41,"endColumn":47},{"ruleId":"146","severity":1,"message":"181","line":18,"column":10,"nodeType":"148","messageId":"149","endLine":18,"endColumn":24},{"ruleId":"153","severity":1,"message":"154","line":26,"column":15,"nodeType":"155","messageId":"156","endLine":26,"endColumn":17},{"ruleId":"157","severity":1,"message":"182","line":33,"column":6,"nodeType":"159","endLine":33,"endColumn":8,"suggestions":"183"},{"ruleId":"146","severity":1,"message":"184","line":68,"column":7,"nodeType":"148","messageId":"149","endLine":68,"endColumn":13},{"ruleId":"165","severity":1,"message":"185","line":121,"column":32,"nodeType":"167","messageId":"170","endLine":121,"endColumn":34},{"ruleId":"153","severity":1,"message":"186","line":121,"column":47,"nodeType":"155","messageId":"156","endLine":121,"endColumn":49},{"ruleId":"165","severity":1,"message":"185","line":122,"column":34,"nodeType":"167","messageId":"170","endLine":122,"endColumn":36},{"ruleId":"153","severity":1,"message":"186","line":122,"column":49,"nodeType":"155","messageId":"156","endLine":122,"endColumn":51},{"ruleId":"153","severity":1,"message":"186","line":218,"column":50,"nodeType":"155","messageId":"156","endLine":218,"endColumn":52},{"ruleId":"153","severity":1,"message":"154","line":5,"column":48,"nodeType":"155","messageId":"156","endLine":5,"endColumn":50},{"ruleId":"146","severity":1,"message":"187","line":10,"column":58,"nodeType":"148","messageId":"149","endLine":10,"endColumn":68},{"ruleId":"146","severity":1,"message":"188","line":6,"column":7,"nodeType":"148","messageId":"149","endLine":6,"endColumn":14},{"ruleId":"153","severity":1,"message":"154","line":18,"column":13,"nodeType":"155","messageId":"156","endLine":18,"endColumn":15},{"ruleId":"146","severity":1,"message":"189","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":38,"column":16,"nodeType":"155","messageId":"156","endLine":38,"endColumn":18},{"ruleId":"153","severity":1,"message":"154","line":38,"column":30,"nodeType":"155","messageId":"156","endLine":38,"endColumn":32},{"ruleId":"153","severity":1,"message":"154","line":38,"column":46,"nodeType":"155","messageId":"156","endLine":38,"endColumn":48},{"ruleId":"153","severity":1,"message":"154","line":38,"column":62,"nodeType":"155","messageId":"156","endLine":38,"endColumn":64},{"ruleId":"190","severity":1,"message":"191","line":54,"column":123,"nodeType":"192","messageId":"156","endLine":54,"endColumn":132},{"ruleId":"190","severity":1,"message":"193","line":54,"column":143,"nodeType":"192","messageId":"156","endLine":54,"endColumn":152},{"ruleId":"153","severity":1,"message":"186","line":66,"column":30,"nodeType":"155","messageId":"156","endLine":66,"endColumn":32},{"ruleId":"194","severity":1,"message":"195","line":89,"column":13,"nodeType":"196","endLine":93,"endColumn":14},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'toast' is defined but never used.","'emailjs' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getallQuery' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["199"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'setFFrame' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression",["200"],["197"],["198"],"'logindata' is assigned a value but never used.","'navigate' is assigned a value but never used.","'homepage' is assigned a value but never used.","'ToastContainer' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllQuery' and 'navigate'. Either include them or remove the dependency array.",["201"],"'option' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","Expected '!==' and instead saw '!='.","'ishomepage' is assigned a value but never used.","'display' is assigned a value but never used.","'Container' is defined but never used.","no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","Duplicate key 'marginTop'.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"202","fix":"203"},{"kind":"204","justification":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [getallQuery, navigate]",{"range":"208","text":"209"},"directive","","Update the dependencies array to be: [getAllQuery, navigate]",{"range":"210","text":"211"},[877,880],"[getallQuery, navigate]",[1056,1058],"[getAllQuery, navigate]"]