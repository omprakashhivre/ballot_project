[{"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\index.js":"1","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\App.js":"2","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ForgotPass.js":"3","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Vote.js":"4","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Login.js":"5","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\CreateQuery.js":"6","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\reg.js":"7","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Ahomepage.js":"8","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\API\\APIProvider.js":"9","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\nav.js":"10","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Upper_part.js":"11","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\LoadingSpinner.js":"12","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\UI\\Button.js":"13","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ResetPass.js":"14","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Frame.js":"15","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Pagination.js":"16","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Overlay.js":"17"},{"size":266,"mtime":1653383563018,"results":"18","hashOfConfig":"19"},{"size":3779,"mtime":1655439511739,"results":"20","hashOfConfig":"19"},{"size":5779,"mtime":1657258526269,"results":"21","hashOfConfig":"19"},{"size":5753,"mtime":1657258520010,"results":"22","hashOfConfig":"19"},{"size":3383,"mtime":1656578692112,"results":"23","hashOfConfig":"19"},{"size":5251,"mtime":1655466090986,"results":"24","hashOfConfig":"19"},{"size":5513,"mtime":1656579242751,"results":"25","hashOfConfig":"19"},{"size":10821,"mtime":1655661386691,"results":"26","hashOfConfig":"19"},{"size":1291,"mtime":1656651736576,"results":"27","hashOfConfig":"19"},{"size":1729,"mtime":1654444013660,"results":"28","hashOfConfig":"19"},{"size":1228,"mtime":1655660359075,"results":"29","hashOfConfig":"19"},{"size":216,"mtime":1653384532652,"results":"30","hashOfConfig":"19"},{"size":382,"mtime":1655405275717,"results":"31","hashOfConfig":"19"},{"size":2701,"mtime":1657258534162,"results":"32","hashOfConfig":"19"},{"size":4171,"mtime":1655864554203,"results":"33","hashOfConfig":"19"},{"size":3468,"mtime":1654074806191,"results":"34","hashOfConfig":"19"},{"size":737,"mtime":1654505036351,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"yb96t1",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"39"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"39"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\index.js",[],[],["100","101"],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\App.js",["102","103","104"],[],"import \"./App.css\";\nimport Reg from \"./Pages/reg\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport Login from \"./Pages/Login\";\nimport Ahomepage from \"./Pages/Ahomepage\";\nimport CreateQuery from \"./Pages/CreateQuery\";\nimport Vote from \"./Components/Vote\";\nimport ForgotPass from \"./Components/ForgotPass\";\nimport { useEffect } from \"react\";\n\n// rafce\n\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  useEffect(() => {\n    // getallQuery()\n  }, [])\n\n  // const [optData, setoptData] = useState([])\n  // const [checkmate, setcheckmate] = useState(false)\n  // var votes = [];\n  // const [ballot, setBallot] = useState([])\n  // const [loggedIn, setLoggedIn] = useState({ emailId: \"\" })\n\n  // const addinballot = (q) => {\n  //   ballot.map((bal) => {\n  //     if (bal.id === q.id) {\n  //       setcheckmate(true)\n  //     }\n  //   })\n\n  //   if (!checkmate) {\n  //     setcheckmate(false)\n  //     setBallot([...ballot, q])\n  //     console.log(ballot);\n  //   }\n  // }\n\n  // const getallQuery = async () => {\n  //   var array = [];\n\n  //   console.log(\"getAllQuery called\");\n  //   var allQuery = await fetch(\"http://3.6.191.95:3000/query/getAllquery\")\n  //     .then((resp) => resp.json())\n  //     .then((actualData) => {\n  //       return actualData\n  //     })\n\n  //   const respQueries = allQuery.data;\n\n\n  //   await respQueries.map(async (singleQuery) => {\n  //     var q;\n\n  //     const query = singleQuery.queryName\n  //     const id = singleQuery.queryId\n  //     q = { \"id\": id, \"query\": query }\n  //     const singlequeryoptions = await fetch(\"http://3.6.191.95:3000/options/getalloptions\", {\n  //       method: \"POST\",\n  //       headers: { \"Content-Type\": \"application/json\" },\n  //       body: JSON.stringify({ queryId: id })\n\n  //     })\n  //       .then((resp) => resp.json())\n  //       .then(async (actualData) => {\n  //         let alloptions = []\n  //         const opt = await actualData.data.map(async (singleoption) => {\n  //           let firstOption = { \"optionId\": singleoption.optionId, \"optionName\": singleoption.options }\n\n  //           const voteaddedoption = await fetch(\"http://3.6.191.95:3000/users/voteforsingleoption\", {\n  //             method: \"POST\",\n  //             headers: { \"Content-Type\": \"application/json\" },\n  //             body: JSON.stringify({ optionId: singleoption.optionId })\n  //           }).then((resp1) => resp1.json())\n  //             .then((optiondata) => {\n  //               firstOption = { ...firstOption, \"totalvote\": optiondata.data[0].voteforsingleoption }\n  //             })\n  //           alloptions.push(firstOption)\n  //           return firstOption\n  //         })\n  //         q = { ...q, \"options\": alloptions, \"isUserVoted\": false }\n  //         array.push(q)\n  //         return actualData\n  //       })\n\n  //     return 1;\n  //   })\n  //   console.log(array);\n  //   setBallot(array)\n  //   console.log(ballot);\n\n  // }\n\n\n  return (\n    <div className=\"background\">\n      {/* <APIProvider> */}\n        <Routes>\n          <Route path=\"/reg\" exact element={<Reg />} />\n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/homepage\" element={<Ahomepage />} />\n          <Route path=\"/createquery\" element={<CreateQuery />} />\n          <Route path=\"/forgotpass\" element={<ForgotPass />} />\n          <Route path=\"/allframes\" element={<Vote />} />\n        </Routes>\n      {/* </APIProvider> */}\n      <ToastContainer\n    position=\"bottom-right\"\n    autoClose={2000}\n    hideProgressBar={false}\n    newestOnTop={false}\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable\n    pauseOnHover\n  />\n    </div>\n    \n   \n  );\n\n}\n\nexport default App;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ForgotPass.js",["105"],[],"import emailjs from \"emailjs-com\";\nimport { ResetPass } from \"./ResetPass.js\";\nimport \"../Pages/reg\";\n// import Button from \"../UI/Button\";\nimport Nav from \"./nav\";\nimport Upperpart from \"./Upper_part\";\nimport Container from \"@mui/material/Container\";\n// import { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport \"../UI/Button.css\";\n\n//toastify\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nvar ForgotPass = () => {\n  const sendOtpButton = document.getElementById('otpbutton')\n  const sendOtpInput = document.getElementById('givenEmail')\n\n  const [otpsends, setOtpsends] = useState(false);\n  const [verifyotp, setverifyotp] = useState(false);\n  const [otp, setOtp] = useState(0);\n  const [emailId, setemailId] = useState(\"\");\n\n  const [userreg, updateuserreg] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    updateuserreg({ ...userreg, [name]: value });\n  };\n\n  const sendOtp = async (givenEmail) => {\n    //changes\n    sendOtpButton.innerText = \"Resend\"\n   \n\n    const newOtp = Math.floor(Math.random() * 1000000);\n    setOtp(newOtp);\n    setemailId(givenEmail)\n    \n    console.log(otp + \" == \" + newOtp + \" \" + givenEmail);\n    try {\n      const user = await fetch(\"http://localhost:3000/users/log?email=\" + givenEmail)\n        .then((response) => response.json())\n        .catch(xy => console.log(xy))\n      console.log(user);\n      if (user) {\n        emailjs\n          .send(\n            \"service_ukgndsq\",\n            \"template_k8qpx17\",\n            {\n              message: newOtp,\n              to_email: givenEmail,\n            },\n            \"user_NDtOXp78ookGeIZN8R3ie\"\n          )\n        .then(function (res) {\n          // console.log(\"status \" + res.status);\n          setOtpsends(true)\n          toast.success('OTP send successfully on email -  ' + givenEmail, {\n            position: \"bottom-right\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          })\n          sendOtpInput.readOnly = true\n          setOtpsends(true);\n          document.getElementById(\"otpbutton\").style.display = \"none\";\n        });\n      }\n      else\n        throw new Error(\"email not rergistered. Kindly Register...\");\n    } catch (error) {\n      toast.warn('not able to send OTP Because, ' + error, {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      })\n    }\n  };\n\n  const verifyOtp = (otpgot) => {\n    if (otp == otpgot) {\n      sendOtpButton.style.display = 'none'\n      toast.success('OTP Matches, PLease Update Password', {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      })\n      setverifyotp(true);\n    } else toast.warn('Invalid OTP, Please check it again', {\n      position: \"bottom-right\",\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    })\n  };\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg lgin\">\n        <Upperpart top_heading=\"\" heading=\"Forgot Password\" bottom_heading=\"Enter Registered mail /\" link=\"Create account\" href=\"/reg\" />\n        <>\n          <div className=\"email-to-password\" id=\"login_input\">\n            <div style={{ display: \"flex\", flexDirection: \"column\" }} id=\"\">\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                required\n                autoComplete=\"off\"\n                value={userreg.email}\n                onChange={handleInput}\n                name=\"email\"\n                style={{ width: \"auto\", marginBottom: \"20px\" }}\n                id=\"givenEmail\"\n              />\n              <button className=\"reg_submit\" onClick={() => sendOtp(document.getElementById(\"givenEmail\").value)} id=\"otpbutton\">\n                Send OTP\n              </button>\n            </div>\n            {otpsends ? (\n              <>\n                {verifyotp ? (\n                  <ResetPass emailId={emailId} />\n                ) : (\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }} id=\"otpbox\">\n                    <input\n                      required\n                      type=\"number\"\n                      placeholder=\"Enter otp\"\n                      autoComplete=\"off\"\n                      onChange={handleInput}\n                      name=\"otp\"\n                      id=\"enteredotp\"\n                      style={{ marginRight: \"20px\" }}\n                    />\n                    <div style={{ marginTop: '20px', width: \"auto\", textAlign: \"center\" }}>\n                      <button className=\"reg_submit\" onClick={() => verifyOtp(document.getElementById(\"enteredotp\").value)} type='submit'>\n                        Verify OTP\n                      </button>\n                    </div>\n\n                  </div>\n                )}{\" \"}\n              </>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </>\n      </Container>\n      <ToastContainer\n        position=\"bottom-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </>\n  );\n};\nexport default ForgotPass;","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Vote.js",["106","107","108","109","110","111","112","113","114","115","116"],["117"],"import Nav from \"./nav\";\nimport React from 'react'\nimport { Frame } from './Frame'\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from 'react'\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport Container from \"@mui/material/Container\";\nimport '../Pages/Ahomepage.css'\nimport Pagination from \"../Pages/Pagination\";\n\n//toastify\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst Vote = () => {\n  let navigate = useNavigate();\n  useEffect(() => {\n    if (localStorage.getItem(\"userID\")) {\n      if (localStorage.getItem(\"userID\") == 1) {\n        console.log(\"admin logged\");\n        navigate(\"/homepage\")\n      }\n      else if (localStorage.getItem(\"userID\") > 1)\n        console.log(\"user logged\");\n      getallQuery()\n    }\n    else\n      navigate(\"/\")\n  }, [1])\n\n  const local_userId = localStorage.getItem(\"userID\")\n  const [frame, setFrame] = useState([])\n  const [isLoading, setIsLoading] = useState(false);\n  const [fframe, setFFrame] = useState([])\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(2);\n\n\n  const getallQuery = async () => {\n    setIsLoading(true)\n\n    var array = [];\n\n    const idlist = await fetch(\"http://localhost:3000/users/getidlist?userId=\" + local_userId)\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:3000/users/getfilteredquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n      console.log(allQuery);\n\n    const respQueries = allQuery.data;\n\n    respQueries.map(async (singleQuery) => {\n      var q;\n      const query = singleQuery.queryname\n      const id = singleQuery.queryId\n      let option = singleQuery.options\n      q = { \"id\": id, \"query\": query, \"startDate\": singleQuery.querystartdate, \"endDate\": singleQuery.queryenddate, isExpired: false }\n\n      const _option = []\n\n      option.map(async (singleoption) => {\n        const oid = singleoption.optionId\n        let firstOption = { \"optionId\": oid, \"optionName\": singleoption.options }\n\n        const votes = await fetch(\"http://localhost:3000/users/voteforsingleoption?optionId=\" + oid)\n          .then((resp) => resp.json())\n          .then((actualData) => {\n            return actualData\n          })\n\n        firstOption = { ...firstOption, \"totalvote\": votes.voteforsingleoption }\n        _option.push(firstOption)\n        return firstOption\n      })\n\n      // console.log(_option);\n      let isvoted = false;\n      await idlist.map((single) => {\n        // eslint-disable-next-line no-unused-expressions\n        single.queryId == id ? isvoted = true : isvoted\n      })\n      q = { ...q, \"option\": _option, \"isUserVoted\": isvoted }\n\n\n      // console.log(q);\n      array.push(q)\n      return null;\n    })\n    // console.log(array);\n    array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1)\n\n    setTimeout(() => {\n      setFrame(array)\n      // setFFrame(array)\n      setIsLoading(false)\n      console.log(frame);\n    }, 1200)\n    // console.log(array)\n\n\n  }\n\n  const setVote = (qid, optionId) => {\n    // console.log(local_userId + \" == \" + \"qid == \" + qid + \" option == \" + optionId);\n    // console.log(\"query id \" + qid + \" optionId \" + optionId);\n    setFrame(frame.map((vote) => (vote.id == qid ? { ...vote, option: vote.option.map((opt) => opt.optionId == optionId ? { ...opt, totalvote: opt.totalvote + 1 } : opt), isUserVoted: true } : vote)));\n    // console.log(data);\n    fetch(\"http://localhost:3000/users/castvote\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ queryId: qid, optionId: optionId, userId: local_userId })\n    })\n    toast.success('Thanks for voting...!', {\n      position: \"bottom-right\",\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n   \n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  //pagination \n  const paginate = pageNumber => setCurrentPage(pageNumber);\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  let currentPosts = (frame.slice(indexOfFirstPost, indexOfLastPost))\n\n  return (\n    <>\n      <Nav logedin=\"\" firstName={localStorage.getItem(\"firstname\") || \"X\"} lastName={localStorage.getItem(\"lastname\") || \"X\"}/>\n\n      <form onSubmit={handleSubmit} className=\"Ahomepage_form\">\n        <Container className=\"reg\" id=\"Outer_container\">\n          <Container className=\"Inner_container\">\n\n            {\n              isLoading ? <LoadingSpinner /> :\n                <>\n                  {\n                    frame.length > 0 ?\n                      currentPosts.map((vote, index) => {\n                        if (new Date(vote.endDate) > new Date())\n                          return <Frame key={vote.id} index={index+indexOfFirstPost} vote={vote} setVote={setVote} />\n\n                      }\n                      ) : <h2 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\" , fontFamily:\"Poppins\" }}>currently no active ballots for vote...</h2>\n                  }\n                </>\n\n            }\n          </Container>\n        </Container>\n      </form>\n      {\n       fframe.length <= currentPosts.length ?\n        <Pagination postsPerPage={postsPerPage} totalPosts={frame.length} paginate={paginate} style={{ position: \"absolute\", bottom: \"2rem\" }} /> :\n        <></>\n\n      }\n      {/*  */}\n\n     \n\n    </>\n  )\n}\n\nexport default Vote\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Login.js",["118","119"],[],"import \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nvar Login = () => {\n\n  const [inputClass, setInputClass] = useState({class : \"\" , msg : \"\"})\n  const [UserReg, updateUserReg] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [logindata, setLoginData] = useState({})\n\n\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    updateUserReg({ ...UserReg, [name]: value });\n  };\n  let navigate = useNavigate();\n  function req() {\n    navigate(\"/homepage\");\n  }\n\n  const onsubmit = async (e) => {\n    e.preventDefault();\n    //validation part is here to be written\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email: e.target.email.value, password: e.target.password.value })\n    }\n\n\n    const response = await fetch('http://localhost:3000/users/login', requestOptions)\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      }).catch(setInputClass({class : \"invalid\" , msg : \"Not able to fetch data from server\"}))\n\n    console.log(response);\n    const respdata = response.data\n    \n\n\n\n\n    if (response.status === 1) {\n      // const user = {userID : respdata.id , email: respdata.email,\n      //   firstName : respdata.firstname , lastName: respdata.lastname}\n      // console.log(user);\n      localStorage.setItem(\"userID\" , respdata.id);\n      localStorage.setItem(\"firstname\" , respdata.firstname);\n      localStorage.setItem(\"lastname\" , respdata.lastname);\n    \n      \n      setLoginData(respdata)\n      console.log(respdata);\n      if (respdata.id == 1)\n        req();\n      else\n        navigate(\"/allframes\");\n    }\n    else {\n      setLoginData(respdata)\n      setInputClass({class : \"invalid\" , msg : \"Please enter correct Credentials\"})\n    }\n\n  };\n\n\n\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg lgin\">\n        <Upperpart top_heading=\"Welcome! Again\" heading=\"Login\" bottom_heading=\"New here?\" link=\"Register account\" href=\"/reg\" />\n        <form action=\"#\" onSubmit={onsubmit}>\n          <div className=\"email-to-password\" id=\"login_input\">\n            <input type=\"email\" placeholder=\"Email\" required autoComplete=\"off\" value={UserReg.email} onChange={handleInput} name=\"email\" className={inputClass.class} />\n\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              required\n              autoComplete=\"off\"\n              value={UserReg.password}\n              onChange={handleInput}\n              name=\"password\"\n              className={inputClass.class}\n            />\n            <p style={{ color: \"red\", fontSize: \"20px\", display: `${inputClass.class ? \"block\" : \"none\"}` }} >{inputClass.msg}</p>\n            <Link to=\"/forgotpass\" id=\"link\" sx={{ color: \"#0029FE\", textDecoration: \"none\", fontSize: \"1.5rem\" }}>\n              Forgot Password?\n            </Link>\n          </div>\n          <Button text=\"LogIn\" display=\"none\" />\n        </form>\n      </Container>\n    </>\n  );\n};\nexport default Login;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\CreateQuery.js",["120","121"],[],"import Nav from \"../Components/nav\";\nimport \"./CreateQuery.css\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"../UI/Button\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\n//toastify\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst CreateQuery = () => {\n  let navigate = useNavigate();\n  const [options, addOptions] = useState([1, 2]);\n  const [QueryFirstname, setQueryFirstname] = useState('');\n\n\n  const handleChange = (e) => {\n    setQueryFirstname(e.target.value)\n  }\n\n  const fetchFunction = async (query) => {\n    console.log(query);\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(query),\n    };\n    try {\n      const done = await fetch(\"http://localhost:3000/users/addquery\", requestOptions);\n      console.log(done);\n      const data = await done.json();\n      if (data.status) {\n        // const querId = data.data.insertId;\n        toast.success('Query Added successfully!', {\n          position: \"bottom-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n        // return querId;\n        console.log(data);\n      }\n    } catch (err) {\n      console.log(err);\n      toast.error('Unable to add query, Try again later...', {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      console.log(err);\n    }\n  };\n\n  const createOption = () => {\n    options.length < 6 ? addOptions([...options, 1]) :\n      // options.length > 2 ? document.getElementById('deleteOption').style.display = 'block' :\n      toast.warn('Only six option allowed to add.', {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      })\n  };\n  // update\n  const deleteOption = () => {\n    if(options.length > 2) \n      addOptions(options.slice(0, -1)) \n      // toast.warn('Minimum 2 options Required', {\n      //   position: \"bottom-right\",\n      //   autoClose: 2000,\n      //   hideProgressBar: false,\n      //   closeOnClick: true,\n      //   pauseOnHover: true,\n      //   draggable: true,\n      //   progress: undefined,\n      // });\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    // var currentTime = new Date();\n    const endTime = new Date(); // The Date object returns today's timestamp\n    endTime.setDate(endTime.getDate() + 2);\n\n    var date1 = (\"0\" + endTime.getDate()).slice(-2)\n    var month1 = (\"0\" + (endTime.getMonth() + 1)).slice(-2);\n    var thisYear1 = endTime.getFullYear();\n    let hours1 = endTime.getHours()\n    let minutes1 = endTime.getMinutes()\n    let seconds1 = endTime.getSeconds();\n\n\n    let enddate = thisYear1 + \"-\" + month1 + \"-\" + date1 + \" \" + hours1 + \":\" + minutes1 + \":\" + seconds1\n\n    const queryName = document.getElementById(\"query\").value;\n    const _option = []\n    options.map((currElem, index) => {\n      const option = document.getElementById(`${index}`).value;\n      _option.push(option)\n    });\n    const query = { queryName: queryName, queryenddate: enddate, \"options\": _option };\n    // console.log(qarray);\n    try {\n      await fetchFunction(query);\n     navigate(\"/homepage\")\n\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const homepage = [\"Homepage\", \"/homepage\"];\n  return (\n    <>\n      <Nav logedin=\"true\" firstName=\"A\" />\n      <Container className=\"createQuery_wrap\">\n        <form onSubmit={handleSubmit} className=\"createQuery_form\">\n          <p>\n            Query<span>(500 characters only!)</span>\n          </p>\n\n          <input type=\"text\" placeholder=\"Input your question here\" id=\"query\" required autoComplete=\"off\" name=\"firstname\" max={500} onChange={handleChange} />\n          <div className=\"styled\">\n            <p>{QueryFirstname}</p>\n          </div>\n\n          <p>\n            Options<span>(150 characters only!)</span>\n          </p>\n          <div className=\"optionsButton_wrap\">\n            <div className=\"optionWrap\">\n              {options.map((currElem, index) => {\n                return <input type=\"text\" placeholder=\"Input your option here\" id={index} required autoComplete=\"off\" name={index} key={index} max={150} />;\n              })}\n            </div>\n            {/* update */}\n            <div>\n              <div onClick={createOption} id=\"buttonWrap\" style={{marginBottom:'1.5rem'}}>\n                <Button text=\"Add Options\" />\n              </div>\n              {\n                options.length > 2 ? <div onClick={deleteOption} id=\"deleteOption\">\n                  <Button text=\"Remove Options\" />\n                </div> : <></>\n              }\n\n            </div>\n\n          </div>\n          <div className=\"submitButton\">\n            <Button display=\"none\" text=\"Submit\" />\n          </div>\n        </form>\n      </Container>\n\n      \n    </>\n  );\n};\n\n\nexport default CreateQuery;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\reg.js",["122"],[],"import \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n//toastify\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nvar Reg = () => {\n  const [invalidClass, setInvalidClass] = useState({class : \"\" , msg : \"\"})\n  let navigate = useNavigate();\n  // const  [c_password_error, updateC_password_error] = useState(\"\");\n  const [userReg, updateuserReg] = useState({\n    fistName: \"\",\n    lastName: \"\",\n    emailId: \"\",\n    password: \"\",\n    c_password: \"\",\n  });\n\n  const [records, updateRecord] = useState([]);\n\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    console.log(name + \" === \" + value);\n    updateuserReg({ ...userReg, [name]: value });\n    console.log(userReg);\n    // console.log(userReg);\n  };\n  const onsubmit = async (e) => {\n    e.preventDefault();\n    console.log(userReg);\n    //validation part is here to be written\n    try {\n        const pass_check = userReg.password == userReg.c_password ? true : false;\n      if (pass_check) {\n        console.log(\"password matches\");\n        const record_with_id = { ...userReg, id: new Date().getTime().toString() };\n        updateRecord([...records, record_with_id]);\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ firstName: userReg.firstName, lastName: userReg.lastName, email: userReg.emailId, password: userReg.password }),\n        };\n\n      const reg = await  fetch(\"http://localhost:3000/users/register\", requestOptions)\n          .then((response) => response.json())\n          .catch(setInvalidClass({class : \"invalid\" , msg : \"Server Not Respond...\"}))\n\n          if(reg.status === 1)\n            { updateuserReg({ firstName: \"\", lastName: \"\", emailId: \"\", password: \"\", c_password: \"\" });\n              // alert(reg.data)\n              console.log(reg.data);\n              toast.success(`Registered Successfully, please Login`, {\n                position: \"bottom-right\",\n                autoClose: 2000,\n                hideProgressBar: false,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: true,\n                progress: undefined,\n              });\n              navigate(\"/\");\n            }\n          else{\n            console.log(reg.data)\n          }  \n\n      } else {\n        setInvalidClass({class : \"invalid\" , msg : \"Password & confirm Password must match\"})\n        toast.warn('Passsword not matches', {\n          position: \"bottom-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        });\n      }\n      \n        \n    } catch (error) {\n      toast.error('Error : '+error, {\n        position: \"bottom-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n  };\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg\">\n        <Upperpart top_heading=\"Start for free\" heading=\"Create new account\" bottom_heading=\"Already a member?\" link=\"LogIn\" href=\"/\" />\n        <form action=\"#\" onSubmit={onsubmit}>\n          <div className=\"Initals\">\n            <input type=\"text\" placeholder=\"First name\" required autoComplete=\"off\" value={userReg.firstName} onChange={handleInput} name=\"firstName\" />\n            <input type=\"text\" placeholder=\"Last name\" required autoComplete=\"off\" value={userReg.lastName} onChange={handleInput} name=\"lastName\" />\n          </div>\n          <div className=\"email-to-password\">\n            <input type=\"email\" placeholder=\"Email\" required autoComplete=\"off\" value={userReg.emailId} onChange={handleInput} name=\"emailId\" />\n            {/* <Button text='Send Otp' onC\n            {\n              <imput type='number' min={1} max={7} required  />\n              isOtpREceived ? <Button text=\"Verify Otp\" display=\"block\" />\n               : <Button text=\"Resend\" display=\"block\" />\n            } */}\n            \n            \n\n\n            <input type=\"password\" placeholder=\"Password\" required autoComplete=\"off\" value={userReg.password} onChange={handleInput} name=\"password\" className={invalidClass.class} min=\"8\" />\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              autoComplete=\"off\"\n              required\n              value={userReg.c_password}\n              onChange={handleInput}\n              name=\"c_password\"\n              className={invalidClass.class}\n            // style={{c_password_error}}\n            />\n\n            <p style={{ color: \"red\", fontSize: \"20px\", display: `${invalidClass.class ? '' : 'none'}` }}>{invalidClass.msg}</p>\n          </div>\n          <Button text=\"Create account\" display=\"none\" />\n        </form>\n      </Container>\n      {/* <ToastContainer\n        position=\"bottom-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      /> */}\n    </>\n  );\n};\nexport default Reg;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Ahomepage.js",["123","124","125","126","127","128","129","130","131","132"],[],"import \"./Ahomepage.css\";\nimport Button from \"../UI/Button\";\nimport Paginatnation from './Pagination'\nimport { Link } from \"react-router-dom\";\nimport { DropdownButton } from 'react-bootstrap'\nimport { ButtonGroup } from 'react-bootstrap'\nimport { Dropdown } from 'react-bootstrap'\nimport Nav from \"../Components/nav\";\nimport Container from \"@mui/material/Container\";\nimport { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { confirmAlert } from 'react-confirm-alert';\nimport 'react-confirm-alert/src/react-confirm-alert.css'\nimport LoadingSpinner from \"../Components/LoadingSpinner\";\nimport '../Components/spinner.css'\n\n//toastify\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nconst Ahomepage = ({ currentItems }) => {\n  let navigate = useNavigate()\n  useEffect(() => {\n    const usrId = localStorage.getItem(\"userID\")\n    if (usrId == 1) {\n      getAllQuery()\n    }\n    else {\n      navigate('/')\n      console.log(\"admin not logged in \");\n    }\n  }, [])\n\n\n\n  const [loading, setLoading] = useState(false)\n  const [frame, setFrame] = useState([])\n  const [fframe, setFFrame] = useState([])\n  const [currentPage, setCurrentPage] = useState(1);\n  const [postsPerPage, setPostsPerPage] = useState(2);\n  var array = []\n  const getAllQuery = async () => {\n\n    setLoading(true)\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:3000/users/getAllquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n    // console.log(allQuery.data);\n    const respQueries = allQuery.data;\n\n\n    respQueries.map(async (singleQuery) => {\n      // console.log(singleQuery);\n      var q;\n\n      const query = singleQuery.queryname\n      const id = singleQuery.queryId\n      let option = singleQuery.options\n      let isExpired = new Date(singleQuery.queryenddate) < new Date() ? true : false\n      q = { \"id\": id, \"query\": query, \"startDate\": singleQuery.queryStartDate, \"endDate\": singleQuery.queryenddate, \"isExpired\": isExpired }\n\n      const _option = []\n\n      option = option.map(async (singleoption) => {\n        const oid = singleoption.optionId\n        let firstOption = { \"optionId\": oid, \"optionName\": singleoption.options }\n\n        const votes = await fetch(\"http://localhost:3000/users/voteforsingleoption?optionId=\" + oid)\n          .then((resp) => resp.json())\n          .then((actualData) => {\n            return actualData\n          })\n        // console.log(votes);\n        firstOption = { ...firstOption, \"totalvote\": votes.voteforsingleoption }\n        _option.push(firstOption)\n        // q = { ...q, \"option\": [...option, { optionId: oid, options: optionname, \"totalvote\": votes.voteforsingleoption }] }\n        // console.log(votes);\n        return firstOption\n      })\n      q = { ...q, \"option\": _option }\n      // console.log(q);\n      \n      array.push(q)\n\n      return null;\n    })\n\n    array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1)\n    setTimeout(() => {\n      setFrame(array)\n      setFFrame(array)\n      setLoading(false)\n    }, 1200)\n\n  }\n\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n  };\n\n  const removeFrame = async (id) => {\n    await fetch(\"http://localhost:3000/users/deletequery\", {\n      method: \"delete\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ queryId: id })\n    }).then((res) => res)\n    toast.success('Query deleted successfully!', {\n      position: \"bottom-right\",\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n    setFrame(frame.filter((fr) => { if (fr.id != id) return fr }));\n    setFFrame(fframe.filter((fr) => { if (fr.id != id) return fr }));\n  };\n  \n  //login pagination\n  const indexOfLastPost = currentPage * postsPerPage;\n  const indexOfFirstPost = indexOfLastPost - postsPerPage;\n  let currentPosts = (fframe.slice(indexOfFirstPost, indexOfLastPost))\n  // console.log(currentPosts);\n\n\n\n  // Change page\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n\n  //filter\n  const handleFilter = async (e) => {\n    if (e === 'a') {\n     await setFFrame(frame)\n    }\n    else if (e === \"b\") {\n      console.log(\"live frames\");\n      await setFFrame(frame.filter(function (fr) { return (new Date(fr.endDate) > new Date()) }))\n      // console.log(fframe);\n    }\n    else if (e === 'c') {\n      console.log(\"expires\")\n      await setFFrame(frame.filter(function (fr) { return (new Date(fr.endDate) <= new Date()) }))\n   \n    }\n    else if (e === \"10\" || e === \"5\" || e === \"3\" || e === \"2\") {\n      console.log(e);\n      await setPostsPerPage(parseInt(e))\n    }\n\n  }\n\n\n\n  return (\n    <>\n      <Nav logedin=\"true\" firstName=\"Admin\" />\n      <DropdownButton\n        as={ButtonGroup}\n        key=\"primary\"\n        id={`dropdown-variants-primary`}\n        variant={\"primary\".toLowerCase()}\n        title={\n          'Filter'\n        }\n        style={{ position: \"absolute\", right: \"30px\", top: \"25%\" }}\n        onSelect={handleFilter}\n      >\n        <Dropdown.Item eventKey=\"a\" active setselected>All Frames</Dropdown.Item>\n        <Dropdown.Item eventKey=\"b\">Live Frames</Dropdown.Item>\n        <Dropdown.Item eventKey=\"c\">Expired Frames</Dropdown.Item>\n        <Dropdown.Divider />\n        <Dropdown.Item eventKey=\"10\">10 Frame per page</Dropdown.Item>\n        <Dropdown.Item eventKey=\"5\">5 Frame per page</Dropdown.Item>\n        <Dropdown.Item eventKey=\"3\">3 Frame per page</Dropdown.Item>\n        <Dropdown.Item eventKey=\"2\" setselected >2 Frame per page</Dropdown.Item>\n      </DropdownButton>\n      <form onSubmit={handleSubmit} className=\"Ahomepage_form\">\n\n        <Container className=\"reg\" id=\"Outer_container\">\n          <div id=\"add_frame\">\n            <Link to=\"/createquery\">\n              <Button text=\"Add new frame\" display=\"inline\" />{\" \"}\n            </Link>\n          </div>\n          <Container className=\"Inner_container\">\n            {\n\n              loading ? <LoadingSpinner /> :\n                <>\n                  {\n\n                    fframe.length > 0 ?\n                      currentPosts.map((currElem, index) => {\n                        let sum = 0;\n                        currElem.option.map((op) => sum = sum + parseInt(op.totalvote))\n                        let isexpired = new Date(currElem.endDate) < new Date() ? true : false\n\n                        return (\n\n                          <div className={isexpired ? \"inner_form_expired\" : \"inner_form\"} key={currElem.id}>\n                            {/* update */}\n                            <h2 style={{fontWeight:\"bold\"}}>{index + 1 + indexOfFirstPost}) {currElem.query}</h2>\n                            {/* <Overlay /> */}\n                            \n                            <div style={{ borderRadius: \"10px\", padding: \"10px\", backgroundColor: \"#d5d6f2\" }}>\n                              {currElem.option.map((curr, index) => {\n                                return (\n                                  <div key={currElem.optionsId} style={{ backgroundColor: \"#d5d6f2\", padding: \"2px\", marginTop: \"2px\" }}>\n                                    <div className=\"percent_name_wrap\">\n                                      <span>{sum != 0 ? (Math.round(curr.totalvote / sum) * 100).toFixed() : sum}%</span>\n                                     {/* update */}\n                                      <h3 style={{whiteSpace:'pre'}}>{curr.optionName }</h3>\n                                    </div>\n                                    <div className=\"progress p_inline_bar\">\n                                      <div\n                                        className=\"progress-bar inline-progress-bar\"\n                                        role=\"progressbar\"\n                                        aria-valuemin=\"0\"\n                                        aria-valuemax=\"100\"\n                                        style={{ width: ((Math.ceil(curr.totalvote / sum)) * 100) + \"%\" }}\n                                      ></div>\n                                    </div>{\" \"}\n                                  </div>\n                                );\n                              })}\n                            </div>\n                            <div className=\"bottom_form\">\n                              <div className=\"usersPic_voteCount\">\n                                Total vote: {sum}\n                              </div>\n\n\n\n                              <div className=\"EditRemoveIcon_wrap\">\n\n                                <img title=\"delete this post\"\n                                  src={require(\"../image/remove.png\")}\n                                  alt=\"delete\"\n                                  onClick={() => {\n                                    const options = {\n                                      title: 'Delete Frame',\n                                      message: `${currElem.query}`,\n                                      buttons: [\n                                        {\n                                          label: 'Delete',\n                                          onClick: () => removeFrame(currElem.id ),\n                                        },\n                                        {\n                                          label: 'Cancel',\n                                          onClick: () => console.log(\"delete operation cancelled\")\n                                        }\n                                      ],\n                                      childrenElement: () => <div />,\n                                      // customUI: ({ title, message, onClose }) => <div>Custom UI</div>,\n                                      willUnmount: () => { }\n                                    }\n                                    confirmAlert(options)\n\n                                  }}\n                                  width={\"35.063rem\"}\n                                  height={\"35.063rem\"}\n                                />\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      }) : <h2 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\" }}>No Such Frames Found</h2>\n                  }\n                </>\n            }\n\n          </Container>\n        </Container>\n\n\n      </form>\n            {\n              // update ------------------------------------------- // \n              (currentPosts.length == frame.length) ? '' :\n              <Paginatnation postsPerPage={postsPerPage} totalPosts={fframe.length} paginate={paginate} className='paginate' />\n            }\n    </>\n  );\n\n\n\n\n}\nexport default Ahomepage;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\API\\APIProvider.js",["133"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\nav.js",["134","135"],[],"import \"./nav.css\";\nimport { Link } from \"react-router-dom\";\n\nvar Nav = (props) => {\n  var isAdmin = localStorage.getItem(\"userID\") == 1 ? true : false;\n  var logedin;\n  var firstName;\n  var lastName;\n  var ishomepage = false;\n  props.homepage === undefined ? (ishomepage = false) : (ishomepage = true);\n  props.logedin === undefined ? (logedin = false) : (logedin = true);\n  props.firstName === undefined ? (firstName = \" \") : (firstName = props.firstName);\n  props.lastName === undefined ? (lastName = \" \") : (lastName = props.lastName);\n  var pp = firstName.split(\"\")[0].toUpperCase() + lastName.split(\"\")[0].toUpperCase();\n  return (\n    <nav className=\"navbar-light fluid\">\n      {isAdmin ?\n        <Link to={'/homepage'}><div style={{ display: \"inline-flex\" }} >\n          <div className=\"img-size\">\n          </div>\n          <span className=\" header\">Ballot</span>\n        </div>\n        </Link> :\n        <Link to={'/allframes'}><div style={{ display: \"inline-flex\" }} >\n          <div className=\"img-size\">\n          </div>\n          <span className=\" header\">Ballot</span>\n        </div>\n        </Link>\n      }\n    \n      {logedin ? (\n        <div id=\"imgSpan_wrap\">\n          {/* {ishomepage ? (\n            <Link to={props.homepage[1]} className=\"logoutSpan\">\n              {props.homepage[0]}\n            </Link>\n          ) : (\n            <span></span>\n          )} */}\n          <span id=\"profile_pic\">{pp}</span>\n          <Link to={\"/\"} className=\"logoutSpan\" onClick={() => { localStorage.clear() }}>\n            <span>logout</span>\n          </Link>\n        </div>\n      ) : (\n        <span></span>\n      )}\n    </nav>\n  );\n};\nexport default Nav;\n\n// navbar-expand-lg\n// navbar\n// container\n// navbar-brand\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Upper_part.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\LoadingSpinner.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\UI\\Button.js",["136"],[],"import React from \"react\";\nimport \"./Button.css\";\n\nconst Button = (props) => {\n  var text = props.text;\n  var display = props.display;\n\n  return (\n    <button type=\"submit\" className=\"reg_submit\">\n      {/* <img src={require(\"../image/plus.png\")} width={\"30rem\"} height={\"30rem\"} style={{ display }} alt=\"plus_icon\" /> */}\n      {text}\n    </button>\n  );\n};\n\nexport default Button;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ResetPass.js",["137"],[],"import { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport '../Pages/reg.css'\nimport { useNavigate } from \"react-router-dom\";\n//toastify\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const ResetPass = ({emailId}) => {\n  let navigate = useNavigate();\n  const [invalid,setInvalid] = useState();\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const pass = e.target.password.value\n    const cpass = e.target.cpassword.value\n\n    if(pass == cpass){\n    const requestOptions = {\n      method: \"put\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email: emailId , password: e.target.password.value })\n    }\n\n      const response = await fetch('http://localhost:3000/users/updatepassword', requestOptions)\n        .then((resp) => resp.json())\n        .then((actualData) => {\n          return actualData\n        })\n\n      const respData = response\n      console.log(respData); \n      if (respData.status === 1) {\n        toast.success('Password Updated Successfully..', {\n          position: \"bottom-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        })\n        setTimeout(function() {\n          navigate(\"/\");\n      \n      }, 500)\n      }\n      else {\n        // update\n        toast.error('Something went wrong, Try again', {\n          position: \"bottom-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        })\n        setInvalid('invalid')\n      }\n    }\n    else\n        setInvalid('invalid')\n\n  }\n\n  return (\n    \n    <div>\n    <form action=\"#\" onSubmit={onSubmit}>\n      {/* update */}\n        <input type=\"text\" placeholder=\"New Password\" required autoComplete=\"off\"  name=\"password\" className={invalid} min='8' />\n        <input type=\"password\" placeholder=\"Confirm New Password\" required autoComplete=\"off\" name=\"cpassword\"  className={invalid}/>\n        <p style={{color:\"red\",fontSize:\"20px\",display:`${invalid ? \"block\" : \"none\"}`}}>something goes wrong</p>\n        <div style={{marginTop:'15px',textAlign:'center'}}>\n        <Button text=\"Update Password\">Update Password</Button>\n        </div>\n    </form>\n    <ToastContainer\n        position=\"bottom-right\"\n        autoClose={2000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable\n        pauseOnHover\n      />\n    </div>\n  )\n}\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Frame.js",["138","139","140","141","142","143","144","145"],[],"import \"./framestyle.css\";\nimport \"../Pages/Ahomepage.css\";\nimport Container from \"@mui/material/Container\";\nimport { useState } from 'react'\n\nexport const Frame = ({ vote, setVote, index }) => {\n  const [timer, setTimer] = useState('')\n  const [frameExpired, setFrameExpired] = useState(false)\n\n\n  const options = vote.option\n  var sum = 0\n  options.map((op) => sum = sum + parseInt(op.totalvote))\n\n\n  const enddate = new Date(vote.endDate);\n\n  if (!vote.isUserVoted)\n    setInterval(() => {\n      const currentDate = new Date();\n      var delta = Math.abs(enddate - currentDate) / 1000;\n\n      // calculate (and subtract) whole days\n      var days = Math.floor(delta / 86400);\n      delta -= days * 86400;\n\n      // calculate (and subtract) whole hours\n      var hours = Math.floor(delta / 3600) % 24;\n      delta -= hours * 3600;\n\n      // calculate (and subtract) whole minutes\n      var minutes = Math.floor(delta / 60) % 60;\n      delta -= minutes * 60;\n\n      // what's left is seconds\n      var seconds = (delta % 60).toFixed(0);\n\n      setTimer(days + \"D \" + hours + \"H \" + minutes + \"M \" + seconds)\n      if (days == 0 && hours == 0 && minutes == 0 && seconds == 0) {\n        setFrameExpired(true)\n      }\n    }, 1000)\n\n  if (frameExpired) {\n    return (\n      <></>\n    )\n  }\n  else {\n    return (\n      <div className={\"inner_form\"} key={vote.id} style={{borderRadius:\"10px\"}}>\n        <h3>{index + 1}) {vote.query}</h3>\n        {\n          vote.isUserVoted ? \"\" :\n            <h4 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\", fontFamily: \"Poppins\", fontWeight: \"bold\", textAlign: \"right\", marginTop: \"0%\" }}>Time left : {timer}</h4>\n        }\n        <div style={{ borderRadius: \"10px\", padding: \"10px\", backgroundColor: \"#d5d6f2\" }}>\n\n\n          {vote.option.map((curr, index) => {\n            return (\n              <div key={curr.optionId} style={{ backgroundColor: \"#d5d6f2\", padding: \"2px\", marginTop: \"2px\" }}>\n                <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: \"\", padding: \"0%\" }}>\n                  {vote.isUserVoted ? (\n                    <>\n                      <h5 className=\"frame-query\" style={{ fontSize: \"24px\", marginRight: \"40px\" }}>\n                        {sum != 0 ? ((curr.totalvote / sum) * 100).toFixed(0) : 0}%\n                      </h5>\n                    </>\n                  ) : (\n                    <input type=\"radio\" name=\"inputoption\" value={curr.optionId} style={{ color: \"blue\", width: \"30px\", height: \"50px\", marginRight: \"30px\" }} />\n                  )}\n\n                  <h4 className=\"frame-query\" style={{ fontSize: \"32px\" }}>\n                    {curr.optionName.trim()}{\" \"}\n                  </h4>\n                  <br></br>\n                </div>\n                {\n                  vote.isUserVoted ?\n                    <div className=\"progress p_inline_bar\">\n                      <div\n                        className=\"progress-bar inline-progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        style={{ width: ((Math.ceil(curr.totalvote / sum)) * 100) + \"%\" }}\n                      ></div>\n                    </div> : ''\n                }\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"bottom_form\">\n          <div className=\"usersPic_voteCount\">\n            Total vote: {sum}\n          </div>\n          {\n            vote.isUserVoted ? ' ' :\n              <>\n                {/* <p style={{display:\"inline-grid\",color:\"red\",fontSize:\"20px\"}}> query end on :  {vote.endDate}</p> */}\n                <button className=\"button-btn \" style={{ float: \"right\", marginLeft: \"30%\" }} onClick={() => {\n                  try {\n                    const choosedoption = document.querySelector('input[name=\"inputoption\"]:checked').value\n                    setVote(vote.id, choosedoption)\n                  } catch (error) {\n                    console.log(error)\n                  }\n\n                }\n                }>Vote</button>\n              </>\n          }\n        </div>\n      </div>\n    );\n\n  }\n\n\n};\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Pagination.js",["146"],[],"// import ReactDOM from 'react-dom'\r\n// import ReactPaginate from 'react-paginate';\r\n// import { useState , useEffect } from 'react';\r\n// import Ahomepage from './Ahomepage';\r\n\r\n\r\n// function PaginatedItems({ itemsPerPage }) {\r\n//     // We start with an empty list of items.\r\n//     const [currentItems, setCurrentItems] = useState(null);\r\n//     const [pageCount, setPageCount] = useState(0);\r\n//     // Here we use item offsets; we could also use page offsets\r\n//     // following the API or data you're working with.\r\n//     const [itemOffset, setItemOffset] = useState(0);\r\n  \r\n//     useEffect(() => {\r\n//       // Fetch items from another resources.\r\n//       const endOffset = itemOffset + itemsPerPage;\r\n//       console.log(`Loading items from ${itemOffset} to ${endOffset}`);\r\n//       setCurrentItems(frame.slice(itemOffset, endOffset));\r\n//       setPageCount(Math.ceil(frame.length / itemsPerPage));\r\n//     }, [itemOffset, itemsPerPage]);\r\n  \r\n//     // Invoke when user click to request another page.\r\n//     const handlePageClick = (event) => {\r\n//       const newOffset = (event.selected * itemsPerPage) % frame.length;\r\n//       console.log(\r\n//         `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n//       );\r\n//       setItemOffset(newOffset);\r\n//     };\r\n  \r\n//     return (\r\n//       <>\r\n//         <Ahomepage currentItems={currentItems} />\r\n//         <ReactPaginate\r\n//           breakLabel=\"...\"\r\n//           nextLabel=\"next >\"\r\n//           onPageChange={handlePageClick}\r\n//           pageRangeDisplayed={5}\r\n//           pageCount={pageCount}\r\n//           previousLabel=\"< previous\"\r\n//           renderOnZeroPageCount={null}\r\n//         />\r\n//       </>\r\n//     );\r\n//   }\r\n  \r\n//   // Add a <div id=\"container\"> to your HTML to see the componend rendered.\r\n//   ReactDOM.render(\r\n//     <PaginatedItems itemsPerPage={4} />,\r\n//     document.getElementById('container')\r\n//   );\r\n\r\nimport React from 'react';\r\n\r\nconst Pagination = ({ postsPerPage, totalPosts, paginate }) => {\r\n  const pageNumbers = [];\r\n  \r\n    \r\n  \r\n\r\n  for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\r\n    pageNumbers.push(i);\r\n  }\r\n//   const [itemOffset, setItemOffset] = useState(0);\r\n//   const handlePageClick = (event) => {\r\n//           const newOffset = (event.selected * postsPerPage) % totalPosts;\r\n//           console.log(\r\n//             `User requested page number ${event.selected}, which is offset ${newOffset}`\r\n//           );\r\n//           paginate(newOffset);\r\n//         };\r\nconst selected = (e) =>{\r\n}\r\n  return (\r\n    // <ReactPaginate\r\n    //           breakLabel=\"...\"\r\n    //           nextLabel=\"next >\"\r\n    //           onPageChange={handlePageClick}\r\n    //           pageRangeDisplayed={postsPerPage}\r\n    //           pageCount={totalPosts/postsPerPage}\r\n    //           previousLabel=\"< previous\"\r\n    //           renderOnZeroPageCount={null}\r\n    //         />\r\n    <nav>\r\n      <ul className='pagination'>\r\n        {pageNumbers.map(number => (\r\n          <li key={number} className='page-item'>\r\n            <a onClick={() => paginate(number)} \r\n            style={{cursor:\"pointer\",fontSize:\"25px\",paddingTop:\"3px\",paddingRight:\"10px\",paddingLeft:\"10px\"}} \r\n            className='page-link'\r\n            onSelect={selected}\r\n            >\r\n              {number}\r\n            </a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Overlay.js",[],[],{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":3,"column":25,"nodeType":"153","messageId":"154","endLine":3,"endColumn":33},{"ruleId":"151","severity":1,"message":"155","line":4,"column":10,"nodeType":"153","messageId":"154","endLine":4,"endColumn":18},{"ruleId":"151","severity":1,"message":"156","line":15,"column":26,"nodeType":"153","messageId":"154","endLine":15,"endColumn":31},{"ruleId":"157","severity":1,"message":"158","line":95,"column":13,"nodeType":"159","messageId":"160","endLine":95,"endColumn":15},{"ruleId":"151","severity":1,"message":"161","line":13,"column":10,"nodeType":"153","messageId":"154","endLine":13,"endColumn":24},{"ruleId":"157","severity":1,"message":"158","line":21,"column":42,"nodeType":"159","messageId":"160","endLine":21,"endColumn":44},{"ruleId":"162","severity":1,"message":"163","line":31,"column":6,"nodeType":"164","endLine":31,"endColumn":9,"suggestions":"165"},{"ruleId":"162","severity":1,"message":"166","line":31,"column":7,"nodeType":"167","endLine":31,"endColumn":8},{"ruleId":"151","severity":1,"message":"168","line":36,"column":18,"nodeType":"153","messageId":"154","endLine":36,"endColumn":27},{"ruleId":"151","severity":1,"message":"169","line":38,"column":24,"nodeType":"153","messageId":"154","endLine":38,"endColumn":39},{"ruleId":"170","severity":1,"message":"171","line":87,"column":33,"nodeType":"172","messageId":"173","endLine":87,"endColumn":35},{"ruleId":"157","severity":1,"message":"158","line":89,"column":24,"nodeType":"159","messageId":"160","endLine":89,"endColumn":26},{"ruleId":"157","severity":1,"message":"158","line":115,"column":43,"nodeType":"159","messageId":"160","endLine":115,"endColumn":45},{"ruleId":"157","severity":1,"message":"158","line":115,"column":109,"nodeType":"159","messageId":"160","endLine":115,"endColumn":111},{"ruleId":"170","severity":1,"message":"174","line":157,"column":54,"nodeType":"172","messageId":"175","endLine":157,"endColumn":56},{"ruleId":"176","severity":2,"message":"177","line":89,"column":9,"nodeType":"178","messageId":"179","endLine":89,"endColumn":56,"suppressions":"180"},{"ruleId":"151","severity":1,"message":"181","line":17,"column":10,"nodeType":"153","messageId":"154","endLine":17,"endColumn":19},{"ruleId":"157","severity":1,"message":"158","line":65,"column":23,"nodeType":"159","messageId":"160","endLine":65,"endColumn":25},{"ruleId":"170","severity":1,"message":"171","line":109,"column":35,"nodeType":"172","messageId":"173","endLine":109,"endColumn":37},{"ruleId":"151","severity":1,"message":"182","line":124,"column":9,"nodeType":"153","messageId":"154","endLine":124,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":41,"column":45,"nodeType":"159","messageId":"160","endLine":41,"endColumn":47},{"ruleId":"151","severity":1,"message":"161","line":18,"column":10,"nodeType":"153","messageId":"154","endLine":18,"endColumn":24},{"ruleId":"157","severity":1,"message":"158","line":26,"column":15,"nodeType":"159","messageId":"160","endLine":26,"endColumn":17},{"ruleId":"162","severity":1,"message":"183","line":33,"column":6,"nodeType":"164","endLine":33,"endColumn":8,"suggestions":"184"},{"ruleId":"151","severity":1,"message":"185","line":68,"column":7,"nodeType":"153","messageId":"154","endLine":68,"endColumn":13},{"ruleId":"170","severity":1,"message":"186","line":121,"column":32,"nodeType":"172","messageId":"175","endLine":121,"endColumn":34},{"ruleId":"157","severity":1,"message":"187","line":121,"column":47,"nodeType":"159","messageId":"160","endLine":121,"endColumn":49},{"ruleId":"170","severity":1,"message":"186","line":122,"column":34,"nodeType":"172","messageId":"175","endLine":122,"endColumn":36},{"ruleId":"157","severity":1,"message":"187","line":122,"column":49,"nodeType":"159","messageId":"160","endLine":122,"endColumn":51},{"ruleId":"157","severity":1,"message":"187","line":217,"column":50,"nodeType":"159","messageId":"160","endLine":217,"endColumn":52},{"ruleId":"157","severity":1,"message":"158","line":286,"column":36,"nodeType":"159","messageId":"160","endLine":286,"endColumn":38},{"ruleId":"151","severity":1,"message":"188","line":19,"column":14,"nodeType":"153","messageId":"154","endLine":19,"endColumn":23},{"ruleId":"157","severity":1,"message":"158","line":5,"column":48,"nodeType":"159","messageId":"160","endLine":5,"endColumn":50},{"ruleId":"151","severity":1,"message":"189","line":10,"column":58,"nodeType":"153","messageId":"154","endLine":10,"endColumn":68},{"ruleId":"151","severity":1,"message":"190","line":6,"column":7,"nodeType":"153","messageId":"154","endLine":6,"endColumn":14},{"ruleId":"157","severity":1,"message":"158","line":18,"column":13,"nodeType":"159","messageId":"160","endLine":18,"endColumn":15},{"ruleId":"151","severity":1,"message":"191","line":3,"column":8,"nodeType":"153","messageId":"154","endLine":3,"endColumn":17},{"ruleId":"157","severity":1,"message":"158","line":39,"column":16,"nodeType":"159","messageId":"160","endLine":39,"endColumn":18},{"ruleId":"157","severity":1,"message":"158","line":39,"column":30,"nodeType":"159","messageId":"160","endLine":39,"endColumn":32},{"ruleId":"157","severity":1,"message":"158","line":39,"column":46,"nodeType":"159","messageId":"160","endLine":39,"endColumn":48},{"ruleId":"157","severity":1,"message":"158","line":39,"column":62,"nodeType":"159","messageId":"160","endLine":39,"endColumn":64},{"ruleId":"192","severity":1,"message":"193","line":55,"column":123,"nodeType":"194","messageId":"160","endLine":55,"endColumn":132},{"ruleId":"192","severity":1,"message":"195","line":55,"column":143,"nodeType":"194","messageId":"160","endLine":55,"endColumn":152},{"ruleId":"157","severity":1,"message":"187","line":67,"column":30,"nodeType":"159","messageId":"160","endLine":67,"endColumn":32},{"ruleId":"196","severity":1,"message":"197","line":89,"column":13,"nodeType":"198","endLine":93,"endColumn":14},"no-native-reassign",["199"],"no-negated-in-lhs",["200"],"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'toast' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'ToastContainer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getallQuery' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["201"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'setFFrame' is assigned a value but never used.","'setPostsPerPage' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression",["202"],"'logindata' is assigned a value but never used.","'homepage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getAllQuery' and 'navigate'. Either include them or remove the dependency array.",["203"],"'option' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","Expected '!==' and instead saw '!='.","'emailSend' is defined but never used.","'ishomepage' is assigned a value but never used.","'display' is assigned a value but never used.","'Container' is defined but never used.","no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","Duplicate key 'marginTop'.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},{"kind":"206","justification":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [getallQuery, navigate]",{"range":"210","text":"211"},"directive","","Update the dependencies array to be: [getAllQuery, navigate]",{"range":"212","text":"213"},[877,880],"[getallQuery, navigate]",[1056,1058],"[getAllQuery, navigate]"]