[{"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\index.js":"1","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\App.js":"2","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ForgotPass.js":"3","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Vote.js":"4","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Login.js":"5","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\CreateQuery.js":"6","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\reg.js":"7","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Ahomepage.js":"8","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\API\\APIProvider.js":"9","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\nav.js":"10","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Upper_part.js":"11","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\LoadingSpinner.js":"12","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\UI\\Button.js":"13","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ResetPass.js":"14","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Frame.js":"15","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Pagination.js":"16"},{"size":266,"mtime":1653383563018,"results":"17","hashOfConfig":"18"},{"size":3574,"mtime":1654053547054,"results":"19","hashOfConfig":"18"},{"size":4049,"mtime":1653384521553,"results":"20","hashOfConfig":"18"},{"size":4630,"mtime":1653384567386,"results":"21","hashOfConfig":"18"},{"size":3205,"mtime":1653997384553,"results":"22","hashOfConfig":"18"},{"size":4656,"mtime":1653384115415,"results":"23","hashOfConfig":"18"},{"size":3871,"mtime":1653990639936,"results":"24","hashOfConfig":"18"},{"size":9592,"mtime":1654075071679,"results":"25","hashOfConfig":"18"},{"size":2351,"mtime":1654052756314,"results":"26","hashOfConfig":"18"},{"size":1338,"mtime":1654056229710,"results":"27","hashOfConfig":"18"},{"size":1228,"mtime":1653384574546,"results":"28","hashOfConfig":"18"},{"size":216,"mtime":1653384532652,"results":"29","hashOfConfig":"18"},{"size":374,"mtime":1653384151238,"results":"30","hashOfConfig":"18"},{"size":1801,"mtime":1653384548463,"results":"31","hashOfConfig":"18"},{"size":3945,"mtime":1653384583457,"results":"32","hashOfConfig":"18"},{"size":3468,"mtime":1654074806191,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"yb96t1",{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"37"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"37"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"37"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"37"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"37"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"37"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"37"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\index.js",[],[],["91","92"],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\App.js",["93","94","95","96","97","98","99","100","101","102","103","104"],[],"import \"./App.css\";\nimport Reg from \"./Pages/reg\";\nimport { Routes, Route, Navigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport Login from \"./Pages/Login\";\nimport Ahomepage from \"./Pages/Ahomepage\";\nimport CreateQuery from \"./Pages/CreateQuery\";\nimport Vote from \"./Components/Vote\";\nimport ForgotPass from \"./Components/ForgotPass\";\n// import { APIProvider } from \"./API/APIProvider\";\nimport { useEffect } from \"react\";\n\n// rafce\n\n\nfunction App() {\n  useEffect(() => {\n    // getallQuery()\n  }, [])\n  // useEffect(() => {\n  //   const email = localStorage.getItem(\"emailId\")\n  //   const pass = localStorage.getItem(\"password\")\n  //   if (email && pass) {\n  //     console.log(email+\" \"+pass);\n  //   }\n  //   else {\n  //     Navigate(\"/\")\n  //   }\n  // })\n  const [optdata, setoptdata] = useState([])\n  const [checkmate, setcheckmate] = useState(false)\n  var votes = [];\n  const [ballot, setBallot] = useState([])\n  const [loggedIn, setLoggedIn] = useState({ emailId: \"\" })\n\n  const addinballot = (q) => {\n    ballot.map((bal) => {\n      if (bal.id === q.id) {\n        setcheckmate(true)\n      }\n    })\n\n    if (!checkmate) {\n      setcheckmate(false)\n      setBallot([...ballot, q])\n      console.log(ballot);\n    }\n  }\n\n  const getallQuery = async () => {\n    var array = [];\n\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:5000/query/getAllquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n\n    const respQueries = allQuery.data;\n\n\n    await respQueries.map(async (singleQuery) => {\n      var q;\n\n      const query = singleQuery.queryName\n      const id = singleQuery.queryId\n      q = { \"id\": id, \"query\": query }\n      const singlequeryoptions = await fetch(\"http://localhost:5000/options/getalloptions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ queryId: id })\n\n      })\n        .then((resp) => resp.json())\n        .then(async (actualData) => {\n          let alloptions = []\n          const opt = await actualData.data.map(async (singleoption) => {\n            let firstOption = { \"optionId\": singleoption.optionId, \"optionName\": singleoption.options }\n\n            const voteaddedoption = await fetch(\"http://localhost:5000/users/voteforsingleoption\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ optionId: singleoption.optionId })\n            }).then((resp1) => resp1.json())\n              .then((optiondata) => {\n                firstOption = { ...firstOption, \"totalvote\": optiondata.data[0].voteforsingleoption }\n              })\n            alloptions.push(firstOption)\n            return firstOption\n          })\n          q = { ...q, \"options\": alloptions, \"isUserVoted\": false }\n          array.push(q)\n          return actualData\n        })\n\n      return 1;\n    })\n    console.log(array);\n    setBallot(array)\n    console.log(ballot);\n\n  }\n\n  \n  return (\n    <div className=\"background\">\n      {/* <APIProvider> */}\n        <Routes>\n          <Route path=\"/reg\" exact element={<Reg />} />\n          <Route path=\"/\" element={<Login />} />\n          <Route path=\"/homepage\" element={<Ahomepage />} />\n          <Route path=\"/createquery\" element={<CreateQuery />} />\n          <Route path=\"/forgotpass\" element={<ForgotPass />} />\n          <Route path=\"/allframes\" element={<Vote />} />\n        </Routes>\n      {/* </APIProvider> */}\n    </div>\n  );\n\n}\n\nexport default App;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ForgotPass.js",["105"],[],"import emailjs from \"emailjs-com\";\nimport { ResetPass } from \"./ResetPass.js\";\nimport \"../Pages/reg\";\n// import Button from \"../UI/Button\";\nimport Nav from \"./nav\";\nimport Upperpart from \"./Upper_part\";\nimport Container from \"@mui/material/Container\";\n// import { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport \"../UI/Button.css\";\n// import {  useNavigate } from \"react-router-dom\";\n\nvar ForgotPass = () => {\n  const [otpsends, setotpsends] = useState(false);\n  const [verifyotp, setverifyotp] = useState(false);\n  const [otp, setotp] = useState(0);\n  const [emailId, setemailId] = useState(\"\");\n\n  const [userreg, updateuserreg] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    updateuserreg({ ...userreg, [name]: value });\n  };\n  // let navigate = useNavigate();\n  // function req() {\n  //   navigate(\"/\");\n  // }\n  // const onsubmit = (e) => {\n  //   e.preventDefault();\n  //   //validation part is here to be written\n  //   updateuserreg({ email: \"\", password: \"\" });\n  //   console.log(userreg);\n  //   //req();\n  // };\n  const sendOtp = (givenemail) => {\n    const newotp = Math.floor(Math.random() * 1000000);\n    setotp(newotp);\n    setemailId(givenemail)\n    console.log(otp + \" == \" + newotp + \" \" + givenemail);\n    try {\n      emailjs\n        .send(\n          \"service_ukgndsq\",\n          \"template_k8qpx17\",\n          {\n            message: newotp,\n            to_email: givenemail,\n          },\n          \"user_NDtOXp78ookGeIZN8R3ie\"\n        )\n        .then(function (res) {\n          console.log(\"status \" + res.status);\n          alert(\"OTP send\");\n          setotpsends(true);\n          document.getElementById(\"otpbutton\").style.display = \"none\";\n        });\n    } catch (error) {\n      alert(\"not able to send OTP check email and try again \", error);\n    }\n  };\n\n  const verifyOtp = (otpgot) => {\n    if (otp == otpgot) {\n      alert(otp + \" -- >otp matches\");\n      setverifyotp(true);\n    } else alert(\"invalid otp\");\n  };\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg lgin\">\n        <Upperpart top_heading=\"\" heading=\"Forgot Password\" bottom_heading=\"Enter Registered mail /\" link=\"Create account\" href=\"/reg\" />\n        <>\n          <div className=\"email-to-password\" id=\"login_input\">\n            <div style={{ display: \"flex\", flexDirection: \"column\" }} id=\"\">\n              <input\n                type=\"email\"\n                placeholder=\"Email\"\n                required\n                autoComplete=\"off\"\n                value={userreg.email}\n                onChange={handleInput}\n                name=\"email\"\n                style={{ width: \"auto\", marginBottom: \"20px\" }}\n                id=\"givenemail\"\n              />\n              <button className=\"reg_submit\" onClick={() => sendOtp(document.getElementById(\"givenemail\").value)} id=\"otpbutton\">\n                Send Otp\n              </button>\n            </div>\n            {otpsends ? (\n              <>\n                {verifyotp ? (\n                  <ResetPass  emailId = {emailId} />\n                ) : (\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }} id=\"otpbox\">\n                    <input\n                      type=\"number\"\n                      placeholder=\"Enter otp\"\n                      required\n                      autoComplete=\"off\"\n                      onChange={handleInput}\n                      name=\"otp\"\n                      id=\"enteredotp\"\n                      style={{ marginRight: \"20px\" }}\n                    />\n                    <button className=\"reg_submit\" onClick={() => verifyOtp(document.getElementById(\"enteredotp\").value)}>\n                      Verify OTP\n                    </button>\n                  </div>\n                )}{\" \"}\n              </>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </>\n      </Container>\n    </>\n  );\n};\nexport default ForgotPass;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Vote.js",["106","107","108","109","110","111","112","113","114"],[],"import Nav from \"./nav\";\nimport React from 'react'\nimport { Frame } from './Frame'\nimport { useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useState } from 'react'\nimport LoadingSpinner from \"./LoadingSpinner\";\n\nconst Vote = () => {\n  let navigate = useNavigate();\n  useEffect(() => {\n    if (localStorage.getItem(\"userID\")) {\n      if (localStorage.getItem(\"userID\") == 1) {\n        console.log(\"admin logged\");\n        navigate(\"/homepage\")\n      }\n      else if (localStorage.getItem(\"userID\") > 1)\n        console.log(\"user logged\");\n      getallQuery()\n    }\n    else\n      navigate(\"/\")\n\n\n\n\n  }, [])\n\n  const local_userId = localStorage.getItem(\"userID\")\n  const [data, setData] = useState([])\n  const [isLoading, setIsLoading] = useState(false);\n\n  const getallQuery = async () => {\n    setIsLoading(true)\n\n    var array = [];\n\n    const idlist = await fetch(\"http://localhost:5000/vote/getidlist\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ userId: local_userId })\n    }).then((resp1) => resp1.json())\n      .then((idlist1) => idlist1)\n\n    // console.log(idlist.data);\n\n\n    console.log(\"getAllQuery called\");\n    var allQuery = await fetch(\"http://localhost:5000/query/getfilteredquery\")\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n\n    const respQueries = allQuery.data;\n\n\n    await respQueries.map(async (singleQuery) => {\n      var q;\n\n      const query = singleQuery.queryName\n      const id = singleQuery.queryId\n      q = { \"id\": id, \"query\": query, \"startDate\": singleQuery.querystartdate, \"endDate\": singleQuery.queryenddate }\n\n\n      const singlequeryoptions = await fetch(\"http://localhost:5000/options/getalloptions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ queryId: id })\n\n      })\n        .then((resp) => resp.json())\n        .then(async (actualData) => {\n          let alloptions = []\n          const opt = await actualData.data.map(async (singleoption) => {\n            let firstOption = { \"optionId\": singleoption.optionId, \"optionName\": singleoption.options, \"querystartdate\": singleoption.querystartdate, \"queryenddate\": singleoption.queryenddate }\n\n            const voteaddedoption = await fetch(\"http://localhost:5000/users/voteforsingleoption\", {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({ optionId: singleoption.optionId })\n            }).then((resp1) => resp1.json())\n              .then((optiondata) => {\n                firstOption = { ...firstOption, \"totalvote\": optiondata.data[0].voteforsingleoption }\n              })\n            alloptions.push(firstOption)\n            return firstOption\n          })\n\n          let isvoted = false;\n          idlist.data.map((id) => id.queryId == q.id ? isvoted = true : {})\n          q = { ...q, \"options\": alloptions, \"isUserVoted\": isvoted }\n          array.push(q)\n\n          return actualData\n        })\n      array.sort((a, b) => new Date(a.startDate) < new Date(b.startDate) ? 1 : -1)\n      return 1;\n    })\n    setTimeout(() => {\n      setIsLoading(false)\n      setData(array)\n\n\n    }, 1500)\n    console.log(array)\n\n\n  }\n\n\n  const setVote = (qid, optionId) => {\n    const itm = localStorage.getItem(\"user\")\n    // console.log(itm);\n    alert(\"query id \" + qid + \" optionId \" + optionId);\n    setData(data.map((vote) => (vote.id === qid ? { ...vote, options: vote.options.map((opt) => opt.optionId == optionId ? { ...opt, totalvote: opt.totalvote + 1 } : opt), isUserVoted: true } : vote)));\n    // console.log(data);\n    fetch(\"http://localhost:5000/vote/castvote\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ queryId: qid, optionId: optionId, userId: local_userId })\n    })\n  }\n\n  return (\n    <>\n      <Nav logedin=\"\" firstName={localStorage.getItem(\"firstname\") || \"xx\"} lastName={localStorage.getItem(\"lastname\") || \"xx\"} />\n\n\n      {\n        isLoading ? <LoadingSpinner /> :\n          <>\n            {\n              data.length > 0 ?\n                data.map((vote, index) => {\n                  if (new Date(vote.endDate) > new Date())\n                    return <Frame key={vote.id} index={index} vote={vote} setVote={setVote} />\n\n                }\n                ) : <h2 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\" }}>currently no active ballots for vote...</h2>\n            }\n          </>\n\n      }\n\n\n    </>\n  )\n}\n\nexport default Vote\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Login.js",["115","116"],[],"import \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { Link } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nvar Login = () => {\n\n  const [inputClass, setInputClass] = useState()\n  const [userreg, updateuserreg] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [logindata, setlogindata] = useState({})\n\n\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    updateuserreg({ ...userreg, [name]: value });\n  };\n  let navigate = useNavigate();\n  function req() {\n    navigate(\"/homepage\");\n  }\n\n  const onsubmit = async (e) => {\n    e.preventDefault();\n    //validation part is here to be written\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ email: e.target.email.value, password: e.target.password.value })\n    }\n\n\n    const response = await fetch('http://localhost:5000/users/login', requestOptions)\n      .then((resp) => resp.json())\n      .then((actualData) => {\n        return actualData\n      })\n\n    console.log(response);\n    const respdata = response.data\n    \n\n\n\n\n    if (response.status === 1) {\n      // const user = {userID : respdata.id , email: respdata.email,\n      //   firstName : respdata.firstname , lastName: respdata.lastname}\n      // console.log(user);\n      localStorage.setItem(\"userID\" , respdata.id);\n      localStorage.setItem(\"firstname\" , respdata.firstName);\n      localStorage.setItem(\"lastname\" , respdata.lastName);\n    \n      \n      setlogindata(respdata)\n      console.log(respdata);\n      if (respdata.id == 1)\n        req();\n      else\n        navigate(\"/allframes\");\n    }\n    else {\n      setlogindata(respdata)\n      setInputClass(\"invalid\")\n    }\n\n  };\n\n\n\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg lgin\">\n        <Upperpart top_heading=\"Welcome! Again\" heading=\"Login\" bottom_heading=\"New here?\" link=\"Register account\" href=\"/reg\" />\n        <form action=\"#\" onSubmit={onsubmit}>\n          <div className=\"email-to-password\" id=\"login_input\">\n            <input type=\"email\" placeholder=\"Email\" required autoComplete=\"off\" value={userreg.email} onChange={handleInput} name=\"email\" className={inputClass} />\n\n            <input\n              type=\"password\"\n              placeholder=\"Password\"\n              required\n              autoComplete=\"off\"\n              value={userreg.password}\n              onChange={handleInput}\n              name=\"password\"\n              className={inputClass}\n            />\n            <p style={{ color: \"red\", fontSize: \"20px\", display: `${inputClass ? \"block\" : \"none\"}` }} >invalid credentials</p>\n            <Link to=\"/forgotpass\" id=\"link\" sx={{ color: \"#0029FE\", textDecoration: \"none\", fontSize: \"1.5rem\" }}>\n              Forget Password?\n            </Link>\n          </div>\n          <Button text=\"LogIn\" display=\"none\" />\n        </form>\n      </Container>\n    </>\n  );\n};\nexport default Login;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\CreateQuery.js",["117","118","119","120"],[],"import Nav from \"../Components/nav\";\nimport \"./CreateQuery.css\";\nimport Container from \"@mui/material/Container\";\nimport Button from \"../UI/Button\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n// import { useNavigate } from \"react-router-dom\";\n\nconst CreateQuery = () => {\n  let navigate = useNavigate();\n  const [options, addOptions] = useState([1, 2]);\n  const [query, setQuery] = useState({\n    queryName: \"\",\n    queryStartDate: \"\",\n    queryEndDate: \"\",\n  });\n  const fetchFunction = async (query) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...query }),\n    };\n    try {\n      const done = await fetch(\"http://localhost:5000/Query/addquery\", requestOptions);\n      const data = await done.json();\n      if (data.success) {\n        const querId = data.data.insertId;\n        return querId;\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const postOptions = async (options) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...options }),\n    };\n    try {\n      const done = await fetch(\"http://localhost:5000/Query/addoptions\", requestOptions);\n      const data = await done.json();\n      if (data.success) {\n        if (data.success === 1) {\n          console.log(`Options ${options.options} is added to Database successfully.`);\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n  const createOption = () => {\n    options.length < 6 ? addOptions([...options, 1]) : alert(\"Only 6 Options are allowed!\");\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    var currentTime = new Date();\n    const endTime = new Date(); // The Date object returns today's timestamp\n    endTime.setDate(endTime.getDate() + 2);\n\n\n    // console.log(endTime);\n    var date = (\"0\" + currentTime.getDate()).slice(-2)\n    var month = (\"0\" + (currentTime.getMonth() + 1)).slice(-2);\n    var thisYear = currentTime.getFullYear();\n    let hours = currentTime.getHours()\n    let minutes = currentTime.getMinutes()\n    let seconds = currentTime.getSeconds();\n\n    var date1 = (\"0\" + endTime.getDate()).slice(-2)\n    var month1 = (\"0\" + (endTime.getMonth() + 1)).slice(-2);\n    var thisYear1 = endTime.getFullYear();\n    let hours1 = endTime.getHours()\n    let minutes1 = endTime.getMinutes()\n    let seconds1 = endTime.getSeconds();\n\n    var todaydate = thisYear + \"-\" + month + \"-\" + date + \" \" + hours + \":\" + minutes + \":\" + seconds\n    var enddate = thisYear1 + \"-\" + month1 + \"-\" + date1 + \" \" + hours1 + \":\" + minutes1 + \":\" + seconds1\n    const queryName = document.getElementById(\"query\").value;\n\n    const qarray = { queryName: queryName, queryStartDate: todaydate, queryEndDate: enddate };\n    // console.log(qarray);\n    try {\n      const queryPromise = await fetchFunction(qarray);\n      const queryId = queryPromise.PromiseResult;\n      // console.log(queryPromise);\n      setTimeout(() => {\n        options.map((currElem, index) => {\n          const option = document.getElementById(`${index}`).value;\n          const optionObj = { queryId: queryPromise, options: option };\n          postOptions(optionObj);\n        });\n        alert(\"query added successfully\")\n        \n        navigate(\"/homepage\")\n        window.location.reload()\n      }, 1000);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  const homepage = [\"Homepage\", \"/homepage\"];\n  return (\n    <>\n      <Nav logedin=\"true\" firstName=\"A\" homepage={homepage} />\n      <Container className=\"createQuery_wrap\">\n        <form onSubmit={handleSubmit} className=\"createQuery_form\">\n          <p>\n            Query<span>(500 characters only!)</span>\n          </p>\n          <input type=\"text\" placeholder=\"Input your question here\" id=\"query\" required autoComplete=\"off\" name=\"firstName\" />\n          <p>\n            Options<span>(150 characters only!)</span>\n          </p>\n          <div className=\"optionsButton_wrap\">\n            <div className=\"optionWrap\">\n              {options.map((currElem, index) => {\n                return <input type=\"text\" placeholder=\"Input your option here\" id={index} required autoComplete=\"off\" name={index} key={index} />;\n              })}\n            </div>\n            <div onClick={createOption} id=\"buttonWrap\">\n              <Button text=\"Options\" />\n            </div>\n          </div>\n          <div className=\"submitButton\">\n            <Button display=\"none\" text=\"Submit\" />\n          </div>\n        </form>\n      </Container>\n    </>\n  );\n};\n\nexport default CreateQuery;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\reg.js",["121"],[],"import \"./reg.css\";\nimport Button from \"../UI/Button\";\nimport Nav from \"../Components/nav\";\nimport Upperpart from \"../Components/Upper_part\";\nimport Container from \"@mui/material/Container\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nvar Reg = () => {\n  const [invalid, setInvalid] = useState();\n  let navigate = useNavigate();\n  // const  [c_password_error, updateC_password_error] = useState(\"\");\n  const [userreg, updateuserreg] = useState({\n    fistName: \"\",\n    lastName: \"\",\n    emailId: \"\",\n    password: \"\",\n    c_password: \"\",\n  });\n\n  const [records, updaterecord] = useState([]);\n\n  const handleInput = (e) => {\n    //checking of imput is here to pe written\n    const name = e.target.name;\n    const value = e.target.value;\n    console.log(name + \" === \" + value);\n    updateuserreg({ ...userreg, [name]: value });\n    console.log(userreg);\n    // console.log(userreg);\n  };\n  const onsubmit = async (e) => {\n    e.preventDefault();\n    console.log(userreg);\n    //validation part is here to be written\n    try {\n        const pass_check = userreg.password == userreg.c_password ? true : false;\n      if (pass_check) {\n        console.log(\"password matches\");\n        const record_with_id = { ...userreg, id: new Date().getTime().toString() };\n        updaterecord([...records, record_with_id]);\n        const requestOptions = {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify({ firstName: userreg.firstName, lastName: userreg.lastName, email: userreg.emailId, password: userreg.password }),\n        };\n\n      const reg = await  fetch(\"http://localhost:5000/users/register\", requestOptions)\n          .then((response) => response.json())\n          .catch(xy => console.log(xy))\n\n          if(reg.status === 1)\n            { updateuserreg({ firstName: \"\", lastName: \"\", emailId: \"\", password: \"\", c_password: \"\" });\n              // alert(reg.data)\n              console.log(reg.data);\n              navigate(\"/\");\n            }\n          else{\n            console.log(reg.data)\n          }  \n\n      } else {\n        setInvalid('invalid')\n      }\n      \n        \n    } catch (error) {\n      alert(\"something went wrong \"+error)\n    }\n  };\n  return (\n    <>\n      <Nav />\n      <Container className=\"reg\">\n        <Upperpart top_heading=\"Start for free\" heading=\"Create new account\" bottom_heading=\"Already a member?\" link=\"LogIn\" href=\"/\" />\n        <form action=\"#\" onSubmit={onsubmit}>\n          <div className=\"Initals\">\n            <input type=\"text\" placeholder=\"First name\" required autoComplete=\"off\" value={userreg.firstName} onChange={handleInput} name=\"firstName\" />\n            <input type=\"text\" placeholder=\"Last name\" required autoComplete=\"off\" value={userreg.lastName} onChange={handleInput} name=\"lastName\" />\n          </div>\n          <div className=\"email-to-password\">\n            <input type=\"email\" placeholder=\"Email\" required autoComplete=\"off\" value={userreg.emailId} onChange={handleInput} name=\"emailId\" />\n            <input type=\"password\" placeholder=\"Password\" required autoComplete=\"off\" value={userreg.password} onChange={handleInput} name=\"password\" className={invalid} min=\"8\" />\n            <input\n              type=\"password\"\n              placeholder=\"Confirm Password\"\n              autoComplete=\"off\"\n              required\n              value={userreg.c_password}\n              onChange={handleInput}\n              name=\"c_password\"\n              className={invalid}\n            // style={{c_password_error}}\n            />\n            <p style={{ color: \"red\", fontSize: \"20px\", display: `${invalid ? '' : 'none'}` }}>password and conform password must match</p>\n          </div>\n          <Button text=\"Create account\" display=\"none\" />\n        </form>\n      </Container>\n    </>\n  );\n};\nexport default Reg;\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Ahomepage.js",["122","123","124","125","126","127","128","129","130","131","132","133"],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\API\\APIProvider.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\nav.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Upper_part.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\LoadingSpinner.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\UI\\Button.js",[],[],"C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\ResetPass.js",["134","135"],[],"import { red } from \"@mui/material/colors\";\nimport { useState } from \"react\";\nimport Button from \"../UI/Button\";\nimport '../Pages/reg.css'\nimport { useNavigate } from \"react-router-dom\";\n\n\nexport const ResetPass = ({emailId}) => {\n  let navigate = useNavigate();\n  console.log(emailId);\n  const [invalid,setInvalid] = useState();\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const pass = e.target.password.value\n    const cpass = e.target.cpassword.value\n\n    if(pass == cpass){\n    const requestOptions = {\n      method: \"put\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ emailId: emailId , password: e.target.password.value })\n    }\n\n      const response = await fetch('http://localhost:5000/users/updatepassword', requestOptions)\n        .then((resp) => resp.json())\n        .then((actualData) => {\n          return actualData\n        })\n\n      const respdata = response\n      console.log(respdata); \n      if (respdata.success === 1) {\n        alert(emailId + \" password updated succesfully\")\n        setTimeout(function() {\n          navigate(\"/\");\n      \n      }, 500)\n      }\n      else {\n        alert(\"email not updated\")\n        setInvalid('invalid')\n      }\n    }\n    else\n        setInvalid('invalid')\n\n  }\n\n  return (\n    \n    <div>\n    <form action=\"#\" onSubmit={onSubmit}>\n        <input type=\"text\" placeholder=\"Password\" required autoComplete=\"off\"  name=\"password\" className={invalid} />\n        <input type=\"password\" placeholder=\"Confirm Password\" required autoComplete=\"off\" name=\"cpassword\"  className={invalid}/>\n        <p style={{color:\"red\",fontSize:\"20px\",display:`${invalid ? \"block\" : \"none\"}`}}>something goes wrong</p>\n        <Button text=\"Update Password\">Update Password</Button>\n    </form>\n    </div>\n  )\n}\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Components\\Frame.js",["136","137","138","139","140"],[],"import \"./framestyle.css\";\nimport \"../Pages/Ahomepage.css\";\nimport Container from \"@mui/material/Container\";\nimport {useState} from 'react'\nexport const Frame = ({ vote, setVote, index }) => {\n\n  const [timer,setTimer] = useState('')\n\n\n  const options = vote.options\n  var sum = 0\n  options.map((op) => sum = sum + op.totalvote)\n\n\n  const enddate = new Date(vote.endDate);\n\n  if(!vote.isUserVoted)\n  var interval = setInterval(() => {\n    const currentDate = new Date();\n  var delta = Math.abs(enddate - currentDate) / 1000;\n\n  // calculate (and subtract) whole days\n  var days = Math.floor(delta / 86400);\n  delta -= days * 86400;\n\n  // calculate (and subtract) whole hours\n  var hours = Math.floor(delta / 3600) % 24;\n  delta -= hours * 3600;\n\n  // calculate (and subtract) whole minutes\n  var minutes = Math.floor(delta / 60) % 60;\n  delta -= minutes * 60;\n\n  // what's left is seconds\n  var seconds = delta % 60;\n\n  setTimer(days + \"D \" + hours + \"H \" + minutes + \"M \" + seconds.toFixed(0))\n  },1000)\n  \n\n  return (\n    <Container className=\"single-frame Ahomepage_form inner_form\">\n      {\n        vote.isUserVoted ? \"\" :\n        <h4 style={{ color: \"red\", textAlign: \"center\", marginTop: \"5rem\", fontFamily: \"Poppins\", fontWeight: \"bold\", textAlign: \"right\", marginTop: \"0%\" }}>Time left : {timer}</h4>\n      }\n\n      <h3 className=\"frame-query\">{vote.query}</h3>\n      {\n        options.map((opt, index) => {\n\n\n          return (\n            <>\n              <div style={{ display: \"flex\", flexDirection: \"row\", marginTop: \"\", padding: \"0%\" }}>\n                {vote.isUserVoted ? (\n                  <>\n                    <h5 className=\"frame-query\" style={{ fontSize: \"24px\", marginRight: \"40px\" }}>\n                      {sum != 0 ? ((opt.totalvote / sum) * 100).toFixed(0) : 0}%\n                    </h5>\n                  </>\n                ) : (\n                  <input type=\"radio\" name=\"inputoption\" value={opt.optionId} style={{ color: \"blue\", width: \"30px\", height: \"50px\", marginRight: \"30px\" }} />\n                )}\n\n                <h3 className=\"frame-query\" style={{ fontSize: \"32px\" }}>\n                  {opt.optionName}{\" \"}\n                </h3>\n                <br></br>\n              </div>\n              {vote.isUserVoted ? (\n                <>\n                  <div className=\"progress p_inline_bar\">\n                    <div\n                      className=\"progress-bar inline-progress-bar\"\n                      role=\"progressbar\"\n                      aria-valuemin=\"0\"\n                      aria-valuemax=\"100\"\n                      style={{ width: `${sum != 0 ? ((opt.totalvote / sum) * 100).toFixed(0) : 0}%` }}\n                    ></div>\n                  </div>\n                  {/* <div id=\"progress\">\n                  <div id=\"progress-bar\" style={{ width: `${((opt[1] / sum) * 100).toFixed(1)}%` }}></div>\n                </div> */}\n                </>\n              ) : (\n                \"\"\n              )}\n            </>\n          );\n        })\n      }\n      <div style={{ display: \"flex\", displayDirection: \"row\" }}>\n        <p className=\"total-votes\">Total votes: {sum}</p>\n        {\n          vote.isUserVoted ? <p style={{ float: \"right\", marginLeft: \"max\", color: \"red\", fontSize: \"medium\" }}>already voted</p>\n            :\n            <>\n              {/* <p style={{display:\"inline-grid\",color:\"red\",fontSize:\"20px\"}}> query end on :  {vote.endDate}</p> */}\n              <button className=\"button-btn \" style={{ float: \"right\", marginLeft: \"30%\" }} onClick={() => {\n                try {\n                  const choosedoption = document.querySelector('input[name=\"inputoption\"]:checked').value\n                  setVote(vote.id, choosedoption)\n                } catch (error) {\n                  alert(\"please choose any option to proceed - \" + error)\n                }\n\n              }\n              }>Vote</button>\n            </>\n        }\n      </div>\n    </Container >\n  );\n};\n","C:\\Users\\omG\\OneDrive\\Documents\\GitHub\\ballot_project\\front_end\\src\\Pages\\Pagination.js",["141"],[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":3,"column":25,"nodeType":"148","messageId":"149","endLine":3,"endColumn":33},{"ruleId":"146","severity":1,"message":"150","line":30,"column":10,"nodeType":"148","messageId":"149","endLine":30,"endColumn":17},{"ruleId":"146","severity":1,"message":"151","line":30,"column":19,"nodeType":"148","messageId":"149","endLine":30,"endColumn":29},{"ruleId":"146","severity":1,"message":"152","line":32,"column":7,"nodeType":"148","messageId":"149","endLine":32,"endColumn":12},{"ruleId":"146","severity":1,"message":"153","line":34,"column":10,"nodeType":"148","messageId":"149","endLine":34,"endColumn":18},{"ruleId":"146","severity":1,"message":"154","line":34,"column":20,"nodeType":"148","messageId":"149","endLine":34,"endColumn":31},{"ruleId":"146","severity":1,"message":"155","line":36,"column":9,"nodeType":"148","messageId":"149","endLine":36,"endColumn":20},{"ruleId":"156","severity":1,"message":"157","line":37,"column":22,"nodeType":"158","messageId":"159","endLine":37,"endColumn":24},{"ruleId":"146","severity":1,"message":"160","line":50,"column":9,"nodeType":"148","messageId":"149","endLine":50,"endColumn":20},{"ruleId":"146","severity":1,"message":"161","line":69,"column":13,"nodeType":"148","messageId":"149","endLine":69,"endColumn":31},{"ruleId":"146","severity":1,"message":"162","line":78,"column":17,"nodeType":"148","messageId":"149","endLine":78,"endColumn":20},{"ruleId":"146","severity":1,"message":"163","line":81,"column":19,"nodeType":"148","messageId":"149","endLine":81,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":68,"column":13,"nodeType":"166","messageId":"167","endLine":68,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":13,"column":42,"nodeType":"166","messageId":"167","endLine":13,"endColumn":44},{"ruleId":"168","severity":1,"message":"169","line":27,"column":6,"nodeType":"170","endLine":27,"endColumn":8,"suggestions":"171"},{"ruleId":"146","severity":1,"message":"161","line":66,"column":13,"nodeType":"148","messageId":"149","endLine":66,"endColumn":31},{"ruleId":"146","severity":1,"message":"162","line":75,"column":17,"nodeType":"148","messageId":"149","endLine":75,"endColumn":20},{"ruleId":"146","severity":1,"message":"163","line":78,"column":19,"nodeType":"148","messageId":"149","endLine":78,"endColumn":34},{"ruleId":"164","severity":1,"message":"165","line":91,"column":46,"nodeType":"166","messageId":"167","endLine":91,"endColumn":48},{"ruleId":"146","severity":1,"message":"172","line":113,"column":11,"nodeType":"148","messageId":"149","endLine":113,"endColumn":14},{"ruleId":"164","severity":1,"message":"165","line":116,"column":110,"nodeType":"166","messageId":"167","endLine":116,"endColumn":112},{"ruleId":"156","severity":1,"message":"173","line":135,"column":40,"nodeType":"158","messageId":"174","endLine":135,"endColumn":42},{"ruleId":"146","severity":1,"message":"175","line":17,"column":10,"nodeType":"148","messageId":"149","endLine":17,"endColumn":19},{"ruleId":"164","severity":1,"message":"165","line":65,"column":23,"nodeType":"166","messageId":"167","endLine":65,"endColumn":25},{"ruleId":"146","severity":1,"message":"176","line":13,"column":10,"nodeType":"148","messageId":"149","endLine":13,"endColumn":15},{"ruleId":"146","severity":1,"message":"177","line":13,"column":17,"nodeType":"148","messageId":"149","endLine":13,"endColumn":25},{"ruleId":"146","severity":1,"message":"178","line":86,"column":13,"nodeType":"148","messageId":"149","endLine":86,"endColumn":20},{"ruleId":"156","severity":1,"message":"157","line":89,"column":39,"nodeType":"158","messageId":"159","endLine":89,"endColumn":41},{"ruleId":"164","severity":1,"message":"165","line":37,"column":45,"nodeType":"166","messageId":"167","endLine":37,"endColumn":47},{"ruleId":"146","severity":1,"message":"179","line":3,"column":8,"nodeType":"148","messageId":"149","endLine":3,"endColumn":21},{"ruleId":"146","severity":1,"message":"180","line":6,"column":8,"nodeType":"148","messageId":"149","endLine":6,"endColumn":16},{"ruleId":"146","severity":1,"message":"181","line":17,"column":10,"nodeType":"148","messageId":"149","endLine":17,"endColumn":17},{"ruleId":"146","severity":1,"message":"182","line":18,"column":10,"nodeType":"148","messageId":"149","endLine":18,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":25,"column":40,"nodeType":"166","messageId":"167","endLine":25,"endColumn":42},{"ruleId":"168","severity":1,"message":"183","line":31,"column":6,"nodeType":"170","endLine":31,"endColumn":9,"suggestions":"184"},{"ruleId":"168","severity":1,"message":"185","line":31,"column":7,"nodeType":"186","endLine":31,"endColumn":8},{"ruleId":"146","severity":1,"message":"187","line":63,"column":7,"nodeType":"148","messageId":"149","endLine":63,"endColumn":13},{"ruleId":"146","severity":1,"message":"188","line":65,"column":15,"nodeType":"148","messageId":"149","endLine":65,"endColumn":25},{"ruleId":"156","severity":1,"message":"189","line":114,"column":32,"nodeType":"158","messageId":"174","endLine":114,"endColumn":34},{"ruleId":"164","severity":1,"message":"190","line":114,"column":47,"nodeType":"166","messageId":"167","endLine":114,"endColumn":49},{"ruleId":"164","severity":1,"message":"190","line":167,"column":52,"nodeType":"166","messageId":"167","endLine":167,"endColumn":54},{"ruleId":"146","severity":1,"message":"191","line":1,"column":10,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"164","severity":1,"message":"165","line":18,"column":13,"nodeType":"166","messageId":"167","endLine":18,"endColumn":15},{"ruleId":"146","severity":1,"message":"192","line":18,"column":7,"nodeType":"148","messageId":"149","endLine":18,"endColumn":15},{"ruleId":"193","severity":1,"message":"194","line":45,"column":119,"nodeType":"195","messageId":"167","endLine":45,"endColumn":128},{"ruleId":"193","severity":1,"message":"196","line":45,"column":139,"nodeType":"195","messageId":"167","endLine":45,"endColumn":148},{"ruleId":"164","severity":1,"message":"190","line":59,"column":28,"nodeType":"166","messageId":"167","endLine":59,"endColumn":30},{"ruleId":"164","severity":1,"message":"190","line":79,"column":46,"nodeType":"166","messageId":"167","endLine":79,"endColumn":48},{"ruleId":"197","severity":1,"message":"198","line":89,"column":13,"nodeType":"199","endLine":93,"endColumn":14},"no-native-reassign",["200"],"no-negated-in-lhs",["201"],"no-unused-vars","'Navigate' is defined but never used.","Identifier","unusedVar","'optdata' is assigned a value but never used.","'setoptdata' is assigned a value but never used.","'votes' is assigned a value but never used.","'loggedIn' is assigned a value but never used.","'setLoggedIn' is assigned a value but never used.","'addinballot' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'getallQuery' is assigned a value but never used.","'singlequeryoptions' is assigned a value but never used.","'opt' is assigned a value but never used.","'voteaddedoption' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getallQuery' and 'navigate'. Either include them or remove the dependency array.","ArrayExpression",["202"],"'itm' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'logindata' is assigned a value but never used.","'query' is assigned a value but never used.","'setQuery' is assigned a value but never used.","'queryId' is assigned a value but never used.","'ReactPaginate' is defined but never used.","'ReactDOM' is defined but never used.","'confirm' is defined but never used.","'style' is defined but never used.","React Hook useEffect has missing dependencies: 'getAllQuery' and 'navigate'. Either include them or remove the dependency array.",["203"],"The 1 literal is not a valid dependency because it never changes. You can safely remove it.","Literal","'option' is assigned a value but never used.","'optionName' is assigned a value but never used.","Array.prototype.filter() expects a value to be returned at the end of arrow function.","Expected '!==' and instead saw '!='.","'red' is defined but never used.","'interval' is assigned a value but never used.","no-dupe-keys","Duplicate key 'textAlign'.","ObjectExpression","Duplicate key 'marginTop'.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [getallQuery, navigate]",{"range":"208","text":"209"},"Update the dependencies array to be: [getAllQuery, navigate]",{"range":"210","text":"211"},[637,639],"[getallQuery, navigate]",[980,983],"[getAllQuery, navigate]"]